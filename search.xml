<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2021/08/01/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Python 与 JSON 共舞</title>
    <url>/2019/03/17/python-json/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>在 Python 开发中，尤其是在涉及 web 开发时，不可避免会与 <a href="http://json.org/">JSON （JavaScript Object Notation）</a> 打交道。本文主要尝试介绍如何在 Python 中使用 JSON 。</p>
<p>在 Python 3 的官方文档中关于 JSON 操作的函数主要有 4 个，它们分别是 <code>json.dump()</code> 、 <code>json.load()</code> 、 <code>json.dumps()</code> 和<code>json.loads()</code> 。 <code>json.dump()</code> 和 <code>json.dumps()</code> 的功能是将 Python 对象进行编码（ encoder ） ，转化为 JSON 格式；而 <code>json.load()</code> 和 <code>json.loads()</code> 则反之，对 JSON 格式对象解码（ ecoder ），转化为 Python 对象。</p>
<span id="more"></span>

<h1 id="json-dump-与-json-dumps-的区别"><a href="#json-dump-与-json-dumps-的区别" class="headerlink" title="json.dump() 与 json.dumps() 的区别"></a>json.dump() 与 json.dumps() 的区别</h1><p><code>json.dump()</code> 与 <code>json.dumps()</code> 的作用都是把 Python 对象序列化为 JSON 格式，不同之处在哪里呢？先来看一下两者的定义：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">json.dump(obj, fp, *, skipkeys=<span class="literal">False</span>, ensure_ascii=<span class="literal">True</span>, check_circular=<span class="literal">True</span>, allow_nan=<span class="literal">True</span>, cls=<span class="literal">None</span>, indent=<span class="literal">None</span>, separators=<span class="literal">None</span>, default=<span class="literal">None</span>, sort_keys=<span class="literal">False</span>, **kw)</span><br><span class="line">json.dumps(obj, *, skipkeys=<span class="literal">False</span>, ensure_ascii=<span class="literal">True</span>, check_circular=<span class="literal">True</span>, allow_nan=<span class="literal">True</span>, cls=<span class="literal">None</span>, indent=<span class="literal">None</span>, separators=<span class="literal">None</span>, default=<span class="literal">None</span>, sort_keys=<span class="literal">False</span>, **kw)</span><br></pre></td></tr></table></figure>

<p>两者的定义基本相同，但是 <code>json.dump()</code> 多了一个 <code>fp</code> 参数。它们的主要区别是： <code>json.dumps()</code> 把 Python 对象序列化为一个 JSON 格式的字符串，而 <code>json.dump()</code> 则是把 Python 对象序列化为一个 JSON 格式的流，这个流可以直接写入到文件或者类似文件的对象。</p>
<p>听起来可能有一些拗口，下面来看个例子：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; import json</span><br><span class="line">&gt;&gt;&gt; person = &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;dormouse&quot;</span>, <span class="string">&quot;age&quot;</span>:40&#125;</span><br><span class="line">&gt;&gt;&gt; json.dumps(person)</span><br><span class="line"><span class="string">&#x27;&#123;&quot;name&quot;: &quot;dormouse&quot;, &quot;age&quot;: 40&#125;&#x27;</span></span><br><span class="line">&gt;&gt;&gt; <span class="built_in">type</span>(json.dumps(person))</span><br><span class="line">&lt;class <span class="string">&#x27;str&#x27;</span>&gt;</span><br></pre></td></tr></table></figure>

<p>从上例中可以看出， <code>json.dumps()</code> 返回了一个 JSON 格式的字符串。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; from pathlib import Path</span><br><span class="line">&gt;&gt;&gt; with Path(<span class="string">&quot;/tmp/person.txt&quot;</span>).open(<span class="string">&#x27;w&#x27;</span>) as fp:</span><br><span class="line">...     json.dump(person, fp)</span><br></pre></td></tr></table></figure>

<p>上例中的代码生成一个名为 <code>/tmp/person.txt</code> 的文件，其内容为： <code>&#123;&quot;name&quot;: &quot;dormouse&quot;, &quot;age&quot;: 40&#125;</code> 。</p>
<p><code>json.load()</code> 与 <code>json.loads()</code> 的区别与之类似。</p>
<h1 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h1><p>把 Python 对象序列化为 JSON 格式对象称为编码，主要使用 <code>json.dump()</code> 和 <code>json.dumps()</code> 函数。根据前文所述，这两个函数基本相同，下面主要以 <code>json.dumps()</code> 函数为例，<code>json.dump()</code> 函数的用法基本类似。</p>
<p><code>json.dumps()</code> 用法示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; import json</span><br><span class="line">&gt;&gt;&gt; person = &#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;dormouse&quot;</span>, <span class="string">&quot;age&quot;</span>:40, <span class="string">&quot;blog&quot;</span>:[<span class="string">&quot;blog1&quot;</span>, <span class="string">&quot;其他&quot;</span>]&#125;</span><br><span class="line">&gt;&gt;&gt; json.dumps(person)</span><br><span class="line"><span class="string">&#x27;&#123;&quot;name&quot;: &quot;dormouse&quot;, &quot;age&quot;: 40, &quot;blog&quot;: [&quot;blog1&quot;, &quot;\\u5176\\u4ed6&quot;]&#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>编码数据类型对应规则如下表：</p>
<table>
<thead>
<tr>
<th>Python</th>
<th>JSON</th>
</tr>
</thead>
<tbody><tr>
<td>dict</td>
<td>object</td>
</tr>
<tr>
<td>list, tuple</td>
<td>array</td>
</tr>
<tr>
<td>str</td>
<td>string</td>
</tr>
<tr>
<td>int, float, int- &amp; float-derived Enums</td>
<td>number</td>
</tr>
<tr>
<td>True</td>
<td>true</td>
</tr>
<tr>
<td>False</td>
<td>false</td>
</tr>
<tr>
<td>None</td>
<td>null</td>
</tr>
</tbody></table>
<h2 id="常用参数"><a href="#常用参数" class="headerlink" title="常用参数"></a>常用参数</h2><p><code>json.dumps()</code> 和  <code>json.dump()</code> 可以使用许多参数，下面介绍几个常用的参数：</p>
<h3 id="ensure-ascii-参数"><a href="#ensure-ascii-参数" class="headerlink" title="ensure_ascii 参数"></a>ensure_ascii 参数</h3><p>该参数如默认值是 <code>True</code> ，在编码时，非 ASCII 字符会被转义，例如在上文的例子中，“其他”两个字被编码为 <code>\\u5176\\u4ed6</code> 。如果该参数设置为 <code>Fasle</code> ，<br>那么就不会转义。例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; json.dumps(person, ensure_ascii=False)</span><br><span class="line"><span class="string">&#x27;&#123;&quot;name&quot;: &quot;dormouse&quot;, &quot;age&quot;: 40, &quot;blog&quot;: [&quot;blog1&quot;, &quot;其他&quot;]&#125;&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="indent-参数"><a href="#indent-参数" class="headerlink" title="indent 参数"></a>indent 参数</h3><p>该参数控制编码结果的缩进，默认值是 <code>None</code> 。默认情况下会编码结果会紧缩在一起。如果该参数设置为一个正整数或者 <code>\t</code> ，那么会使编码结果具有更好的可读性。<br>例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="built_in">print</span>(json.dumps(person, ensure_ascii=False, indent=4))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;dormouse&quot;</span>,</span><br><span class="line">    <span class="string">&quot;age&quot;</span>: 40,</span><br><span class="line">    <span class="string">&quot;blog&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;blog1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;其他&quot;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="sort-keys-参数"><a href="#sort-keys-参数" class="headerlink" title="sort_keys 参数"></a>sort_keys 参数</h3><p>该参数控制编码结果是否按键值排序，默认值是 <code>False</code> 。如果该参数设置为 <code>Ture</code> ，那么编码结果的字典的键值会进行排序。示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="built_in">print</span>(json.dumps(person, ensure_ascii=False, indent=4, sort_keys=True))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;age&quot;</span>: 40,</span><br><span class="line">    <span class="string">&quot;blog&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;blog1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;其他&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;name&quot;</span>: <span class="string">&quot;dormouse&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>更多参数请参阅：<a href="https://docs.python.org/3/library/json.html">Python 3 的官方文档</a></p>
<h1 id="解码"><a href="#解码" class="headerlink" title="解码"></a>解码</h1><p>把 JSON 格式对象转换为 Python 对象称为解码，主要使用 <code>json.load()</code> 和 <code>json.loads()</code> 函数。这两个函数基本相同，区别类似于 <code>json.dump()</code> 和 <code>json.dumps()</code> 函数。下面主要以 <code>json.loads()</code> 函数为例，<code>json.load()</code> 函数的用法基本类似。</p>
<p><code>json.loads()</code> 用法示例：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; json.loads(json.dumps(person))</span><br><span class="line">&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;dormouse&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: 40, <span class="string">&#x27;blog&#x27;</span>: [<span class="string">&#x27;blog1&#x27;</span>, <span class="string">&#x27;其他&#x27;</span>]&#125;</span><br></pre></td></tr></table></figure>

<p>解码数据类型对应规则如下表：</p>
<table>
<thead>
<tr>
<th>JSON</th>
<th>Python</th>
</tr>
</thead>
<tbody><tr>
<td>object</td>
<td>dict</td>
</tr>
<tr>
<td>array</td>
<td>list</td>
</tr>
<tr>
<td>string</td>
<td>str</td>
</tr>
<tr>
<td>number (int)</td>
<td>int</td>
</tr>
<tr>
<td>number (real)</td>
<td>float</td>
</tr>
<tr>
<td>true</td>
<td>True</td>
</tr>
<tr>
<td>false</td>
<td>False</td>
</tr>
<tr>
<td>null</td>
<td>None</td>
</tr>
</tbody></table>
<h1 id="自定义类型处理"><a href="#自定义类型处理" class="headerlink" title="自定义类型处理"></a>自定义类型处理</h1><p>有时候，我们需要处理一些自定义的类型，例如有如下这个类：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, x, y</span>):</span></span><br><span class="line">        self.x = x</span><br><span class="line">        self.y = y</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;x:&#123;&#125;, y:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(self.x, self.y)</span><br></pre></td></tr></table></figure>

<p>当我们要对其实例进行编码时会产生类似如下异常（文件路径有所省略）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; person = &#123;</span><br><span class="line">...    <span class="string">&quot;name&quot;</span>:<span class="string">&quot;dormouse&quot;</span>,</span><br><span class="line">...    <span class="string">&quot;point&quot;</span>: Point(1,2)</span><br><span class="line">&#125;</span><br><span class="line">&gt;&gt;&gt; json.dumps(person)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;input&gt;&quot;</span>, line 1, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">&quot;.../lib/python3.6/json/__init__.py&quot;</span>, line 231, <span class="keyword">in</span> dumps</span><br><span class="line">    <span class="built_in">return</span> _default_encoder.encode(obj)</span><br><span class="line">  File <span class="string">&quot;.../lib/python3.6/json/encoder.py&quot;</span>, line 199, <span class="keyword">in</span> encode</span><br><span class="line">    chunks = self.iterencode(o, _one_shot=True)</span><br><span class="line">  File <span class="string">&quot;.../lib/python3.6/json/encoder.py&quot;</span>, line 257, <span class="keyword">in</span> iterencode</span><br><span class="line">    <span class="built_in">return</span> _iterencode(o, 0)</span><br><span class="line">  File <span class="string">&quot;.../lib/python3.6/json/encoder.py&quot;</span>, line 180, <span class="keyword">in</span> default</span><br><span class="line">    o.__class__.__name__)</span><br><span class="line">TypeError: Object of <span class="built_in">type</span> <span class="string">&#x27;Point&#x27;</span> is not JSON serializable</span><br></pre></td></tr></table></figure>

<p>产生异常的原因是 JSON 默认的方法无法对这种 Python 对象进行编码。那么如何解决这个问题呢？主要有两种方法：</p>
<h2 id="使用函数"><a href="#使用函数" class="headerlink" title="使用函数"></a>使用函数</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_default</span>(<span class="params">o</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 自定义编码函数 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(o, Point):</span><br><span class="line">        <span class="keyword">return</span> (o.x, o.y)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_hook</span>(<span class="params">t</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot; 自定义解码函数 &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> t:</span><br><span class="line">        <span class="keyword">if</span> k == <span class="string">&#x27;point&#x27;</span>:</span><br><span class="line">            x, y = t[k]</span><br><span class="line">            t[k] = Point(x, y)</span><br><span class="line">    <span class="keyword">return</span> t</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编码</span></span><br><span class="line">encode_str = json.dumps(person, default=my_default)</span><br><span class="line"><span class="built_in">print</span>(encode_str)</span><br><span class="line"><span class="comment"># 解码</span></span><br><span class="line">decode_obj = json.loads(encode_str, object_hook=my_hook)</span><br><span class="line"><span class="built_in">print</span>(decode_obj)</span><br></pre></td></tr></table></figure>

<p>输出结果如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;dormouse&quot;</span>, <span class="string">&quot;point&quot;</span>: [<span class="number">1</span>, <span class="number">2</span>]&#125;</span><br><span class="line">&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;dormouse&#x27;</span>, <span class="string">&#x27;point&#x27;</span>: x:<span class="number">1</span>, y:<span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure>

<h2 id="使用类"><a href="#使用类" class="headerlink" title="使用类"></a>使用类</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyEncoder</span>(<span class="params">json.JSONEncoder</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">default</span>(<span class="params">self, o</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">isinstance</span>(o, Point):</span><br><span class="line">            <span class="keyword">return</span> (o.x, o.y)</span><br><span class="line">        <span class="keyword">return</span> json.JSONEncoder.default(o)</span><br><span class="line">encode_str = json.dumps(person, cls=MyEncoder)</span><br><span class="line"><span class="built_in">print</span>(encode_str)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyDecoder</span>(<span class="params">json.JSONDecoder</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">decode</span>(<span class="params">self, s</span>):</span></span><br><span class="line">        t = <span class="built_in">super</span>().decode(s);</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> t:</span><br><span class="line">            <span class="keyword">if</span> k == <span class="string">&#x27;point&#x27;</span>:</span><br><span class="line">                x, y = t[k]</span><br><span class="line">                t[k] = Point(x, y)</span><br><span class="line">        <span class="keyword">return</span> t</span><br><span class="line">decode_obj = json.loads(encode_str, cls=MyDecoder)</span><br><span class="line"><span class="built_in">print</span>(decode_obj)</span><br></pre></td></tr></table></figure>

<p>输出结果如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;dormouse&quot;</span>, <span class="string">&quot;point&quot;</span>: [<span class="number">1</span>, <span class="number">2</span>]&#125;</span><br><span class="line">&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;dormouse&#x27;</span>, <span class="string">&#x27;point&#x27;</span>: x:<span class="number">1</span>, y:<span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure>



<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol>
<li><a href="https://docs.python.org/3/library/json.html">Python 3 的官方文档</a></li>
</ol>
<p>注：</p>
<p>本文的 Python 环境为：</p>
<p>Python 3.6.2 |Continuum Analytics, Inc.| (default, Jul 20 2017, 13:51:32)<br>[GCC 4.4.7 20120313 (Red Hat 4.4.7-1)] on linux</p>
]]></content>
      <tags>
        <tag>python</tag>
        <tag>json</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 Hexo 写博客</title>
    <url>/2018/06/29/write-blog-with-hexo/</url>
    <content><![CDATA[<p>原来一直使用 Sphinx 写东西， 2018 年想开始使用一个真正的博客系统来写一些博客，于是选用了 Hexo 。我主要使用 Python 进行开发，那么为什么不选用 Pelican 之类的以 Python 为基础的博客系统呢？因为不够好看，不够方便。下面是我在安装及使用 Hexo 过程中的一些笔记。</p>
<span id="more"></span>

<h1 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h1><h2 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h2><h3 id="Install-Git"><a href="#Install-Git" class="headerlink" title="Install Git"></a>Install Git</h3><ul>
<li>Windows: Download &amp; install <a href="https://git-scm.com/download/win">git</a>.</li>
<li>Mac: Install it with <a href="http://mxcl.github.com/homebrew/">Homebrew</a>, <a href="http://www.macports.org/">MacPorts</a> or <a href="http://sourceforge.net/projects/git-osx-installer/">installer</a>.</li>
<li>Linux (Ubuntu, Debian): <code>sudo apt-get install git-core</code></li>
<li>Linux (Fedora, Red Hat, CentOS): <code>sudo yum install git-core</code></li>
</ul>
<h3 id="Install-Node-js"><a href="#Install-Node-js" class="headerlink" title="Install Node.js"></a>Install Node.js</h3><p>The best way to install Node.js is with <a href="https://github.com/creationix/nvm">Node Version Manager</a>.<br>Thankfully the creators of nvm provide a simple script that automatically installs nvm:</p>
<p>cURL:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash</span><br></pre></td></tr></table></figure>

<p>Wget:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash</span><br></pre></td></tr></table></figure>

<p>Once nvm is installed, restart the terminal and run the following command to install Node.js:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ nvm install stable</span><br></pre></td></tr></table></figure>

<p>Alternatively, download and run <a href="http://nodejs.org/">the installer</a>.</p>
<h3 id="Install-Hexo"><a href="#Install-Hexo" class="headerlink" title="Install Hexo"></a>Install Hexo</h3><p>Once all the requirements are installed, you can install Hexo with npm:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>


<h2 id="创建一个新的博客"><a href="#创建一个新的博客" class="headerlink" title="创建一个新的博客"></a>创建一个新的博客</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo init blog-hexo</span><br><span class="line">$ <span class="built_in">cd</span> blog-hexo</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure>

<h2 id="创建一个新的博客帖子"><a href="#创建一个新的博客帖子" class="headerlink" title="创建一个新的博客帖子"></a>创建一个新的博客帖子</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>


<h2 id="运行服务器"><a href="#运行服务器" class="headerlink" title="运行服务器"></a>运行服务器</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>这样在浏览器中访问 <code>http://localhost:4000/</code> ，就可以看到博客了。</p>
<h1 id="获得帮助"><a href="#获得帮助" class="headerlink" title="获得帮助"></a>获得帮助</h1><p>Hexo 的官方帮助文档：<a href="https://hexo.io/docs/">英文版</a>，<a href="https://hexo.io/zh-cn/docs/">中文版</a>。</p>
<h1 id="如何发布博客"><a href="#如何发布博客" class="headerlink" title="如何发布博客"></a>如何发布博客</h1><h2 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h2><p>发布博客之前首先要生成静态文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<h2 id="发布到-Git-Pages"><a href="#发布到-Git-Pages" class="headerlink" title="发布到 Git Pages"></a>发布到 Git Pages</h2><p>安装 hexo-deployer-git 插件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p>在站点配置文件中加入以下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:your/repo.github.io.git</span><br></pre></td></tr></table></figure>

<p>使用 <code>hexo deploy</code> 命令来发布博客。</p>
<p>更多内容参见： <a href="https://hexo.io/docs/deployment.html">发布</a></p>
<h1 id="Theme"><a href="#Theme" class="headerlink" title="Theme"></a>Theme</h1><h2 id="NexT-Reloaded"><a href="#NexT-Reloaded" class="headerlink" title="NexT [Reloaded]"></a>NexT [Reloaded]</h2><p>next theme 已经移到<a href="https://github.com/theme-next/hexo-theme-next">新的地址</a><br>通过以下命令安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> your-hexo-path</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/next-theme/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>

<p>在配置文件中设置 theme 的名称：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure>

<p>把 theme 配置文件中的所有设置提制到站点配置文件的 theme_config 下：<br>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">theme_config:</span><br><span class="line">  # Allow to cache content generation. Introduced in NexT v6.0.0.</span><br><span class="line">  cache:</span><br><span class="line">    enable: true</span><br></pre></td></tr></table></figure>

<p>更多内容参见 <a href="https://github.com/theme-next/hexo-theme-next/tree/master/docs/">next theme 文档</a>。</p>
<h1 id="本地搜索"><a href="#本地搜索" class="headerlink" title="本地搜索"></a>本地搜索</h1><h2 id="安装搜索插件"><a href="#安装搜索插件" class="headerlink" title="安装搜索插件"></a>安装搜索插件</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-search  --save</span><br><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>

<h2 id="修改站点配置文件"><a href="#修改站点配置文件" class="headerlink" title="修改站点配置文件"></a>修改站点配置文件</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br><span class="line">theme_config:</span><br><span class="line">  local_search:</span><br><span class="line">    enable: true</span><br><span class="line">    trigger: auto</span><br><span class="line">    top_n_per_article: 1</span><br></pre></td></tr></table></figure>

<h1 id="Categories"><a href="#Categories" class="headerlink" title="Categories"></a>Categories</h1><p>创建 categroies 文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new page categories</span><br></pre></td></tr></table></figure>
<p>以上命令会创建一个名为 <code>your-blog-path/source/categories/index.md</code> 的文件，<br>把文件内容修改为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: categories</span><br><span class="line">date: 2021-02-28 22:25:30</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure>


<h1 id="Tags"><a href="#Tags" class="headerlink" title="Tags"></a>Tags</h1><p>创建 tags 文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new page <span class="string">&quot;tags&quot;</span></span><br></pre></td></tr></table></figure>

<p>以上命令会创建一个名为 <code>your-blog-path/source/tags/index.md</code> 的文件，<br>把文件内容修改为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: tags</span><br><span class="line">date: 2018-07-02 10:18:58</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p>修改站点配置文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: /</span><br><span class="line">  archives: /archives</span><br><span class="line">  tags: /tags</span><br><span class="line">theme_config:</span><br><span class="line">  menu:</span><br><span class="line">    home: / || home</span><br><span class="line">    tags: /tags/ || tags</span><br></pre></td></tr></table></figure>

<h1 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h1><h2 id="只显示摘要"><a href="#只显示摘要" class="headerlink" title="只显示摘要"></a>只显示摘要</h2><p>要实现摘要，只需要在文章开头写好摘要后，另起一行键入 <code>&lt;!−− more −−&gt;</code> 即可，就像这样：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">这是摘要</span><br><span class="line">&lt;!-- more --&gt;</span><br><span class="line">这是正文</span><br></pre></td></tr></table></figure>

<p>如果不想显示“Read More”而显示别的文字比如“阅读更多”，打开主题的配置文件，按如下设置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">excerpt_link: Read More</span><br><span class="line">改为：</span><br><span class="line">excerpt_link: 阅读更多</span><br></pre></td></tr></table></figure>

<h1 id="把源文件加入-git"><a href="#把源文件加入-git" class="headerlink" title="把源文件加入 git"></a>把源文件加入 git</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git init</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;first commit&quot;</span><br><span class="line">git remote add origin git@github.com:your/repo.git</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>
<h1 id="出错处理"><a href="#出错处理" class="headerlink" title="出错处理"></a>出错处理</h1><p>hexo主题next访问报错，出现：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% extends ‘_layout.swig‘ %&#125; &#123;% import ‘_macro/post.swig‘ as post_template %&#125;</span><br></pre></td></tr></table></figure>

<p>原因是hexo在5.0之后把swig给删除了需要自己手动安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i hexo-renderer-swig</span><br></pre></td></tr></table></figure>

<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li><a href="https://hexo.io/docs/">Hexo 文档</a></li>
<li><a href="https://github.com/theme-next/hexo-theme-next/">hexo-theme-next 文档</a></li>
<li><a href="https://www.jianshu.com/p/519b45730824">Hexo开启站内搜索功能</a></li>
<li><a href="https://ohmyarch.github.io/2014/12/24/Hexo%E4%B8%BB%E9%A1%B5%E6%98%BE%E7%A4%BA%E6%91%98%E8%A6%81/">Hexo主页显示摘要</a></li>
</ul>
]]></content>
      <tags>
        <tag>hexo</tag>
        <tag>write</tag>
      </tags>
  </entry>
  <entry>
    <title>使用 Sphinx 生成 PDF 文件</title>
    <url>/2013/01/27/rst-sphinx-pdf/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>本文主要说明如何通过使用 Sphinx 把 reStructuredText （或者 markdown ）生成 PDF 文件。 Sphinx 是一个可以把一系列 reStructuredText 格式文档转换为多种不同格式文档的工具。它具有自动解决交叉引用和编制目录等功能。 Sphinx 支持 html 、 LaTeX 、 ePub 等多种输出格式。现在 Sphinx 已支持 Markdown 格式的源文件。</p>
<span id="more"></span>

<h1 id="安装编译环境"><a href="#安装编译环境" class="headerlink" title="安装编译环境"></a>安装编译环境</h1><p>本文的测试环境为 macOS Sierra 10.12.6, Python 3.6.1 。</p>
<ul>
<li>因为 Sphinx 需要 Python 2.7 或者 Python 3.4 以上版本的 Python ，所以首先要检查系统的 Python 是否安装， Python 的版本是否符合要求。如果想要使用 Python3 ，  macOS 下建议使用 brew 安装， Linux 下建议使用 Anaconda 。</li>
<li>首先我们创建并激活一个 Python3 虚拟环境。打开终端，输入如下命令：</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> python3 -m venv rst_pdf</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> rst_pdf</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">source</span> bin/activate</span></span><br></pre></td></tr></table></figure>

<p>   激活虚拟环境后提示符最前面会出现 <code>(rst_pdf)</code> 字样。</p>
<ul>
<li><p>安装 Sphinx-doc ：</p>
<p>  <code>pip install -U Sphinx</code></p>
</li>
<li><p>安装 LaTeX 支持。 macOS 下建议安装 MacTeX ，安装命令为 <code>brew cask install mactex</code> ，或者到   <a href="https://www.tug.org/mactex/mactex-download.html">https://www.tug.org/mactex/mactex-download.html</a> 下载 MacTeX.pkg 后运行安装。注意这个安装包在大小约有 3.14 G 。Linux 下建议安装  <a href="https://tug.org/texlive/">Tex Live</a>。</p>
</li>
</ul>
<h1 id="编写文档"><a href="#编写文档" class="headerlink" title="编写文档"></a>编写文档</h1><p>首先使用 <code>sphinx-quickstart</code> 命令创建一个 Sphinx 项目。这个命令会提出一系列的问题来帮助我们进行项目的设置，每个问题都有默认答案，如果想使用默认答案或者不知道如何回答，那么直接按回车键就可以了。不用担心回答错误，以后可以通过修改配置文件来变更相关设置。以下就是问题示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Welcome to the Sphinx 1.6.4 quickstart utility.</span><br><span class="line"></span><br><span class="line">Please enter values for the following settings (just press Enter to</span><br><span class="line">accept a default value, if one is given in brackets).</span><br><span class="line"></span><br><span class="line">Enter the root path for documentation.</span><br><span class="line">&gt; Root path for the documentation [.]:</span><br><span class="line"></span><br><span class="line">You have two options for placing the build directory for Sphinx output.</span><br><span class="line">Either, you use a directory &quot;_build&quot; within the root path, or you separate</span><br><span class="line">&quot;source&quot; and &quot;build&quot; directories within the root path.</span><br><span class="line">&gt; Separate source and build directories (y/n) [n]: y</span><br><span class="line">说明：因为我们使用了 Python3 虚拟环境，所以这里我们选择把源文件单独存放在一个目录中。</span><br><span class="line"></span><br><span class="line">Inside the root directory, two more directories will be created; &quot;_templates&quot;</span><br><span class="line">for custom HTML templates and &quot;_static&quot; for custom stylesheets and other static</span><br><span class="line">files. You can enter another prefix (such as &quot;.&quot;) to replace the underscore.</span><br><span class="line">&gt; Name prefix for templates and static dir [_]:</span><br><span class="line"></span><br><span class="line">The project name will occur in several places in the built documentation.</span><br><span class="line">&gt; Project name: rst_pdf</span><br><span class="line">&gt; Author name(s): Dormouse Young</span><br><span class="line"></span><br><span class="line">Sphinx has the notion of a &quot;version&quot; and a &quot;release&quot; for the</span><br><span class="line">software. Each version can have multiple releases. For example, for</span><br><span class="line">Python the version is something like 2.5 or 3.0, while the release is</span><br><span class="line">something like 2.5.1 or 3.0a1.  If you don&#x27;t need this dual structure,</span><br><span class="line">just set both to the same value.</span><br><span class="line">&gt; Project version []:</span><br><span class="line">&gt; Project release []:</span><br><span class="line"></span><br><span class="line">If the documents are to be written in a language other than English,</span><br><span class="line">you can select a language here by its language code. Sphinx will then</span><br><span class="line">translate text that it generates into that language.</span><br><span class="line"></span><br><span class="line">For a list of supported codes, see</span><br><span class="line">http://sphinx-doc.org/config.html#confval-language.</span><br><span class="line">&gt; Project language [en]: zh_CN</span><br><span class="line"></span><br><span class="line">The file name suffix for source files. Commonly, this is either &quot;.txt&quot;</span><br><span class="line">or &quot;.rst&quot;.  Only files with this suffix are considered documents.</span><br><span class="line">&gt; Source file suffix [.rst]:</span><br><span class="line"></span><br><span class="line">One document is special in that it is considered the top node of the</span><br><span class="line">&quot;contents tree&quot;, that is, it is the root of the hierarchical structure</span><br><span class="line">of the documents. Normally, this is &quot;index&quot;, but if your &quot;index&quot;</span><br><span class="line">document is a custom template, you can also set this to another filename.</span><br><span class="line">&gt; Name of your master document (without suffix) [index]:</span><br><span class="line"></span><br><span class="line">Sphinx can also add configuration for epub output:</span><br><span class="line">&gt; Do you want to use the epub builder (y/n) [n]:</span><br><span class="line"></span><br><span class="line">Please indicate if you want to use one of the following Sphinx extensions:</span><br><span class="line">&gt; autodoc: automatically insert docstrings from modules (y/n) [n]:</span><br><span class="line">&gt; doctest: automatically test code snippets in doctest blocks (y/n) [n]:</span><br><span class="line">&gt; intersphinx: link between Sphinx documentation of different projects (y/n) [n]:</span><br><span class="line">&gt; todo: write &quot;todo&quot; entries that can be shown or hidden on build (y/n) [n]:</span><br><span class="line">&gt; coverage: checks for documentation coverage (y/n) [n]:</span><br><span class="line">&gt; imgmath: include math, rendered as PNG or SVG images (y/n) [n]:</span><br><span class="line">&gt; mathjax: include math, rendered in the browser by MathJax (y/n) [n]:</span><br><span class="line">&gt; ifconfig: conditional inclusion of content based on config values (y/n) [n]:</span><br><span class="line">&gt; viewcode: include links to the source code of documented Python objects (y/n) [n]:</span><br><span class="line">&gt; githubpages: create .nojekyll file to publish the document on GitHub pages (y/n) [n]:</span><br><span class="line"></span><br><span class="line">A Makefile and a Windows command file can be generated for you so that you</span><br><span class="line">only have to run e.g. `make html&#x27; instead of invoking sphinx-build</span><br><span class="line">directly.</span><br><span class="line">&gt; Create Makefile? (y/n) [y]: y</span><br><span class="line">&gt; Create Windows command file? (y/n) [y]: n</span><br><span class="line"></span><br><span class="line">Creating file ./source/conf.py.</span><br><span class="line">Creating file ./source/index.rst.</span><br><span class="line">Creating file ./Makefile.</span><br><span class="line"></span><br><span class="line">Finished: An initial directory structure has been created.</span><br><span class="line"></span><br><span class="line">You should now populate your master file ./source/index.rst and create other documentation</span><br><span class="line">source files. Use the Makefile to build the docs, like so:</span><br><span class="line">   make builder</span><br><span class="line">where &quot;builder&quot; is one of the supported builders, e.g. html, latex or linkcheck.</span><br></pre></td></tr></table></figure>



<p>你会发现目录中生成了两个目录和一个文件。<br><code>build</code> 目录用于存放输出的内容，比如我们以后要生成的 PDF 文件。<br><code>source</code> 目录用于存放用户的源文件。<br><code>Makefile</code> 是项目工程文件，方便我们以后生成各种格式的文件。</p>
<p><code>source</code> 目录下有以下两个目录和两个文件。<br><code>_static</code> 目录用于存放用户自定义样式表或者其他静态文件。<br><code>_templates</code> 目录用于存放用户自定义的模版。<br><code>conf.py</code> 是项目配置文件，以后可以通过修改其中的内容来配置我们的项目。<br><code>index.rst</code> 是项目的索引文件，每个 sphinx-doc 项目都至少有一个索引文件。</p>
<p>为了能够正确的生成中文 PDF 文件，我们需要修改 <code>conf.py</code> 的 <code>Options for LaTeX output</code> 一节中的 <code>latex_elements</code> 变量，修改为以下内容：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">latex_elements = &#123;</span><br><span class="line">    &#x27;papersize&#x27;: &#x27;a4paper&#x27;,</span><br><span class="line">    # Additional stuff for the LaTeX preamble.</span><br><span class="line">    &#x27;preamble&#x27;: &#x27;&#x27;&#x27;</span><br><span class="line">\usepackage&#123;xeCJK&#125;</span><br><span class="line">\usepackage&#123;indentfirst&#125;</span><br><span class="line">\setlength&#123;\parindent&#125;&#123;2em&#125;</span><br><span class="line">\setCJKmainfont[BoldFont=STFangsong, ItalicFont=STKaiti]&#123;STSong&#125;</span><br><span class="line">\setCJKsansfont[BoldFont=STHeiti]&#123;STXihei&#125;</span><br><span class="line">\setCJKmonofont&#123;STFangsong&#125;</span><br><span class="line">&#x27;&#x27;&#x27;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在可以在 <code>source</code> 目录下添加我们自己的 reStructuredText 文件。例如本文的源文件就是 <code>rst-sphinx-pdf.rst</code> 文件。写完后要修改 <code>index.rst</code> 文件，把新添加的 <code>rst-sphinx-pdf.rst</code> 文件加入目录树。例如本文的<code>index.rst</code> 内容为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Welcome to rst_pdf&#x27;s documentation!</span><br><span class="line">===================================</span><br><span class="line"></span><br><span class="line">.. toctree::</span><br><span class="line">   :maxdepth: 2</span><br><span class="line">   :caption: Contents:</span><br><span class="line"></span><br><span class="line">   rst_pdf</span><br></pre></td></tr></table></figure>

<p>这里扩展名可以省略。</p>
<h1 id="生成-PDF-文件"><a href="#生成-PDF-文件" class="headerlink" title="生成 PDF 文件"></a>生成 PDF 文件</h1><p>在项目根目录下使用 <code>make latex</code> 命令生成 tex 文件，最后在 <code>build/latex/</code> 目录下运行 <strong>两遍</strong> <code>xelatex rst_pdf.tex</code> 命令即可生成 PDF 文件。</p>
<h1 id="一些-Tips"><a href="#一些-Tips" class="headerlink" title="一些 Tips"></a>一些 Tips</h1><h2 id="让-Sphinx-支持-markdown"><a href="#让-Sphinx-支持-markdown" class="headerlink" title="让 Sphinx 支持 markdown"></a>让 Sphinx 支持 markdown</h2><p>Sphinx 是可以支持 markdown 的。要让 Sphinx 支持 markdown ，需要按如下方法操作：</p>
<ul>
<li>安装 recommonmark ：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install recommonmark</span><br></pre></td></tr></table></figure>

<ul>
<li>在 Sphinx 配置文件中的 <code>source_parsers</code> 变量中添加 Markdown 解析器：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source_parsers = &#123;</span><br><span class="line">   &#x27;.md&#x27;: &#x27;recommonmark.parser.CommonMarkParser&#x27;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>.md</code> 表示 Markdown 文件的扩展名，你可以替换为其他的扩展名。</p>
<ul>
<li>把 Markdown 文件的扩展名添加到配置文件的 <code>source_suffix</code> 变量中：</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source_suffix = [&#x27;.rst&#x27;, &#x27;.md&#x27;]</span><br></pre></td></tr></table></figure>

<ul>
<li>CommonMark 支持添加自定义 Markdown 语法，详见<a href="http://recommonmark.readthedocs.io/en/latest/auto_structify.html">recommonmark 文档</a>。</li>
</ul>
<h2 id="Linux-下安装-TeX-Live"><a href="#Linux-下安装-TeX-Live" class="headerlink" title="Linux 下安装 TeX Live"></a>Linux 下安装 TeX Live</h2><ul>
<li>方法一</li>
</ul>
<p>使用 <code>apt-get install texlive-full</code> 命令安装。</p>
<ul>
<li>方法二</li>
</ul>
<p>去 tex 的 <a href="http://www.tug.org/texlive/acquire-netinstall.html">老家</a> 下载<a href="http://mirror.ctan.org/systems/texlive/tlnet/install-tl-unx.tar.gz">install-tl-unx.tar.gz</a> 。解压缩后，运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ./install-tl --gui=wizard</span><br></pre></td></tr></table></figure>

<p>如果没有安装 wget ，则运行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install wget</span><br></pre></td></tr></table></figure>

<p>安装输出大致如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入 “In” 开始安装，一共有2599个项目......</span><br><span class="line">Actions:</span><br><span class="line">&lt;I&gt; start installation to hard disk</span><br><span class="line">&lt;H&gt; help</span><br><span class="line">&lt;Q&gt; quit</span><br><span class="line"></span><br><span class="line">Enter command: i</span><br><span class="line">Installing to: /usr/local/texlive/2012</span><br><span class="line">Installing [0001/2599, time/total: ??:??/??:??]: 12many [376k]</span><br><span class="line">Installing [0002/2599, time/total: 00:09/10:05:07]: 2up [66k]</span><br><span class="line">Installing [0003/2599, time/total: 00:10/09:32:46]: Asana-Math [458k]</span><br><span class="line">Installing [0004/2599, time/total: 00:12/05:36:55]: ESIEEcv [137k]</span><br><span class="line">Installing [0005/2599, time/total: 00:15/06:05:39]: FAQ-en [5765k]</span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">See /usr/local/texlive/2012/index.html</span><br><span class="line">for links to documentation.  The TeX Live web site</span><br><span class="line">contains updates and corrections: http://tug.org/texlive.</span><br><span class="line"></span><br><span class="line">TeX Live is a joint project of the TeX user groups around the world;</span><br><span class="line">please consider supporting it by joining the group best for you. The</span><br><span class="line">list of user groups is on the web at http://tug.org/usergroups.html.</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Add /usr/local/texlive/2012/texmf/doc/man to MANPATH, if not dynamically determined.</span><br><span class="line">Add /usr/local/texlive/2012/texmf/doc/info to INFOPATH.</span><br><span class="line"></span><br><span class="line">Most importantly, add /usr/local/texlive/2012/bin/x86_64-linux</span><br><span class="line">to your PATH for current and future sessions.</span><br></pre></td></tr></table></figure>

<p>设置路径，把以下内容放在 .bash_profile 中，然后运行 . ~/.bash_profile(ubuntu 下是 ~/.bashrc)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">PATH=<span class="variable">$PATH</span>:<span class="variable">$HOME</span>/.<span class="built_in">local</span>/bin:<span class="variable">$HOME</span>/bin</span><br><span class="line">PATH=/usr/<span class="built_in">local</span>/texlive/2012/bin/x86_64-linux:<span class="variable">$PATH</span>; <span class="built_in">export</span> PATH</span><br><span class="line">MANPATH=/usr/<span class="built_in">local</span>/texlive/2012/texmf/doc/man:<span class="variable">$MANPATH</span>; <span class="built_in">export</span> MANPATH</span><br><span class="line">INFOPATH=/usr/<span class="built_in">local</span>/texlive/2012/texmf/doc/info:<span class="variable">$INFOPATH</span>; <span class="built_in">export</span> INFOPATH</span><br></pre></td></tr></table></figure>

<h2 id="如何查看系统中的字体"><a href="#如何查看系统中的字体" class="headerlink" title="如何查看系统中的字体"></a>如何查看系统中的字体</h2><p>在 macOS 中可以使用“字体册”应用来查看字体名称。在 Linux 中可以用 <code>fc-list</code> 命令来获得字体名称。</p>
]]></content>
      <categories>
        <category>software</category>
      </categories>
      <tags>
        <tag>sphinx</tag>
        <tag>xetex</tag>
        <tag>pdf</tag>
        <tag>reStructuredText</tag>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>【Python茴香豆系列】之 PANDAS 获取 DataFrame 的行数</title>
    <url>/2021/02/03/python-bean/python-bean-count-dataframe-row/</url>
    <content><![CDATA[<p>用 Python 编程，使用不同的方法来完成同一个目标，有时候是一件很有意思的事情。这让我想起鲁迅笔下的孔乙己。孔乙己对于茴香豆的茴字的四种写法颇有研究。我不敢自比孔乙己，这里搜集一些 Python 的茴香豆，以飨各位码农。</p>
<p>一共有多少条数据？这大概是数据分析工作最基本的内容吧。<br>这里，我们来聊一聊如何获取 Pandas 中 DataFrame 的行数。<br>首先准备一个用于测试的 DataFrame 。这个 DataFrame 有 3 列，名称分别为 a 、 b 和 c ：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df = pd.DataFrame(&#123;<span class="string">&#x27;a&#x27;</span>:[<span class="literal">None</span>,<span class="number">2</span>,<span class="number">3</span>], <span class="string">&#x27;b&#x27;</span>:[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>], <span class="string">&#x27;c&#x27;</span>:[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df</span><br><span class="line">     a  b  c</span><br><span class="line"><span class="number">0</span>  NaN  <span class="number">4</span>  <span class="number">7</span></span><br><span class="line"><span class="number">1</span>  <span class="number">2.0</span>  <span class="number">5</span>  <span class="number">8</span></span><br><span class="line"><span class="number">2</span>  <span class="number">3.0</span>  <span class="number">6</span>  <span class="number">9</span></span><br></pre></td></tr></table></figure>

<h1 id="茴香豆一：-count"><a href="#茴香豆一：-count" class="headerlink" title="茴香豆一： count"></a>茴香豆一： count</h1><p>SQL 语句有一个 <code>SELECT count (*) FROM some_table</code> ，<br>DataFrame 同样有一个 <code>count</code> 函数可以用来计数，示例如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>df[<span class="string">&#x27;a&#x27;</span>].count()</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure>

<p>等等，怎么会是 2 ？结果应该是三才对啊！原来， <code>count</code> 会把 <code>NaN</code> 剔除， a 列中有 <code>NaN</code> ，所以结果不对，我们看看 b 列就对了：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>df[<span class="string">&#x27;b&#x27;</span>].count()</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>

<p>可是，我们不能保证每一次碰到的 b 列都没有空值啊，于是我们自己造一列出来：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>df[<span class="string">&#x27;aa&#x27;</span>] = <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df</span><br><span class="line">     a  b  c  aa</span><br><span class="line"><span class="number">0</span>  NaN  <span class="number">4</span>  <span class="number">7</span>   <span class="number">1</span></span><br><span class="line"><span class="number">1</span>  <span class="number">2.0</span>  <span class="number">5</span>  <span class="number">8</span>   <span class="number">1</span></span><br><span class="line"><span class="number">2</span>  <span class="number">3.0</span>  <span class="number">6</span>  <span class="number">9</span>   <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df[<span class="string">&#x27;aa&#x27;</span>].count()</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>

<p>好吧，至此，任务勉强完成了，但是……有一点丑陋。</p>
<span id="more"></span>


<h1 id="茴香豆二：-shape"><a href="#茴香豆二：-shape" class="headerlink" title="茴香豆二： shape"></a>茴香豆二： shape</h1><p>经过艰苦卓绝的学习，我发现 DataFrame 有一个 shape 函数。这是一个奇妙的函数，示例如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>df.shape</span><br><span class="line">(<span class="number">3</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure>
<p>于是，这样就可以得到结果了：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>df.shape[<span class="number">0</span>]</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>

<p>厉害吧，神奇吧。<br>但是 shape 得到的是两个数字，我们只要一个数字，在这里，是不是有点浪费呢？</p>
<h1 id="茴香豆三：-len"><a href="#茴香豆三：-len" class="headerlink" title="茴香豆三： len"></a>茴香豆三： len</h1><p>Python 有一个内置的 len ，一般来说，内置的东西总是高级一点。我们来试试：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">len</span>(df)</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>

<p>那么这个 len 背后又是什么呢？在 IPython 中检查一下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">1</span>]: df.__len__??</span><br><span class="line">Signature: df.__len__() -&gt; <span class="built_in">int</span></span><br><span class="line">Source:</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__len__</span>(<span class="params">self</span>) -&gt; <span class="built_in">int</span>:</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        Returns length of info axis, but here we use the index.</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">len</span>(self.index)</span><br></pre></td></tr></table></figure>

<p>上面的 shape 又是什么呢？</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">2</span>]: df.shape??</span><br><span class="line"><span class="type">Type</span>:        <span class="built_in">property</span></span><br><span class="line">Source:</span><br><span class="line"><span class="comment"># df.shape.fget</span></span><br><span class="line"><span class="meta">@property</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">shape</span>(<span class="params">self</span>) -&gt; <span class="type">Tuple</span>[<span class="built_in">int</span>, <span class="built_in">int</span>]:</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Return a tuple representing the dimensionality of the DataFrame.</span></span><br><span class="line"><span class="string">    ......</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">len</span>(self.index), <span class="built_in">len</span>(self.columns)</span><br></pre></td></tr></table></figure>

<h1 id="茴香豆四：-index"><a href="#茴香豆四：-index" class="headerlink" title="茴香豆四： index"></a>茴香豆四： index</h1><p>从以上两个源代码可以看出，我们应当这样使用 len ：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">len</span>(df.index)</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>

<h1 id="茴香豆五：-再来三个"><a href="#茴香豆五：-再来三个" class="headerlink" title="茴香豆五： 再来三个"></a>茴香豆五： 再来三个</h1><p>山外青山楼外楼， Python 永远还有茴香豆。再来三个：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.index.size</span><br><span class="line"><span class="built_in">len</span>(df.axes[<span class="number">0</span>])</span><br><span class="line">df.pipe(<span class="built_in">len</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python 茴香豆</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>pandas</tag>
        <tag>dataframe</tag>
        <tag>row</tag>
      </tags>
  </entry>
  <entry>
    <title>【Python茴香豆系列】之 拍扁列表</title>
    <url>/2021/02/01/python-bean/python-bean-flatten-list/</url>
    <content><![CDATA[<p>用 Python 编程，使用不同的方法来完成同一个目标，有时候是一件很有意思的事情。这让我想起鲁迅笔下的孔乙己。孔乙己对于茴香豆的茴字的四种写法颇有研究。我不敢自比孔乙己，这里搜集一些 Python 的茴香豆，以飨各位码农。</p>
<p>假设有一个列表：<code>source_list = [[1, 2, 3], [4, 5, 6], [7], [8, 9]]</code> ，要求把这个列表拍扁，变成：<code>[1, 2, 3, 4, 5, 6, 7, 8, 9]</code> 。</p>
<p>这里我们先做一点准备工作：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> functools</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line"><span class="keyword">import</span> operator</span><br><span class="line"></span><br><span class="line">source_list = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>], [<span class="number">7</span>], [<span class="number">8</span>, <span class="number">9</span>]]</span><br></pre></td></tr></table></figure>

<h1 id="茴香豆一：-for-for"><a href="#茴香豆一：-for-for" class="headerlink" title="茴香豆一： for for"></a>茴香豆一： for for</h1><p>如果第一次面对这种问题，可能首先想到的就是 for ，基本的思路如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>flatten_list = []</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> sublist <span class="keyword">in</span> source_list:</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>   <span class="keyword">for</span> item <span class="keyword">in</span> sublist:</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>       flatten_list.append(item)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>flatten_list</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br></pre></td></tr></table></figure>

<p>嗯，工作完成。</p>
<p>当然，如果你熟悉列表的推导的话，上面的一堆可以浓缩成：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[item <span class="keyword">for</span> sublist <span class="keyword">in</span> source_list <span class="keyword">for</span> item <span class="keyword">in</span> sublist]</span><br></pre></td></tr></table></figure>
<span id="more"></span>

<h1 id="茴香豆二：-sum"><a href="#茴香豆二：-sum" class="headerlink" title="茴香豆二： sum"></a>茴香豆二： sum</h1><p>python 有一个内置函数 sum ，这个函数本来是用来给我们做算术的，恰巧列表也是可以求和的，因此下面这句也能用：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sum</span>(source_list, [])</span><br></pre></td></tr></table></figure>

<p>numpy 也有类型的功能的 sum ，效果相同：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">numpy.<span class="built_in">sum</span>(numpy.array(source_list, dtype=<span class="built_in">object</span>))</span><br></pre></td></tr></table></figure>

<h1 id="茴香豆三：-numpy"><a href="#茴香豆三：-numpy" class="headerlink" title="茴香豆三： numpy"></a>茴香豆三： numpy</h1><p>numpy 还有专业拼接数组的工具，可以用来大炮打蚊子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span>(numpy.concatenate(source_list))</span><br></pre></td></tr></table></figure>

<h1 id="茴香豆四：-numpy"><a href="#茴香豆四：-numpy" class="headerlink" title="茴香豆四： numpy"></a>茴香豆四： numpy</h1><p>多个东东变成一个东东，这不能不让我怀念起 reduce 的好：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">functools.reduce(<span class="keyword">lambda</span> x,y: x+y, source_list)</span><br><span class="line">functools.reduce(operator.concat, source_list)</span><br><span class="line">functools.reduce(operator.iconcat, source_list, [])</span><br></pre></td></tr></table></figure>

<p>殊途同归，以上三条语句实现了同样的效果。</p>
<h1 id="茴香豆五：-chain"><a href="#茴香豆五：-chain" class="headerlink" title="茴香豆五： chain"></a>茴香豆五： chain</h1><p>遇到列表的问题，高手们一般会亮出 chain ，以区别于一般俗手：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span>(itertools.chain(*source_list))</span><br><span class="line"><span class="built_in">list</span>(itertools.chain.from_iterable(source_list))</span><br></pre></td></tr></table></figure>

<h1 id="茴香豆六：-flatten"><a href="#茴香豆六：-flatten" class="headerlink" title="茴香豆六： flatten"></a>茴香豆六： flatten</h1><p>最后，请大家不要小看这个问题，但凡玩列表的，估计总有一天会遇到这个问题，不然前辈高人不会造这么多轮子的：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pandas.core.common <span class="keyword">import</span> flatten</span><br><span class="line"><span class="built_in">list</span>(flatten(source_list))</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> matplotlib.cbook <span class="keyword">import</span> flatten</span><br><span class="line"><span class="built_in">list</span>(flatten(source_list))</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> setuptools.namespaces <span class="keyword">import</span> flatten</span><br><span class="line"><span class="built_in">list</span>(flatten(source_list))</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python 茴香豆</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>list</tag>
      </tags>
  </entry>
  <entry>
    <title>【Python茴香豆系列】之 PANDAS 如何遍历 DataFrame 的所有行</title>
    <url>/2021/02/05/python-bean/python-bean-iter-dataframe-row/</url>
    <content><![CDATA[<p>用 Python 编程，使用不同的方法来完成同一个目标，有时候是一件很有意思的事情。这让我想起鲁迅笔下的孔乙己。孔乙己对于茴香豆的茴字的四种写法颇有研究。我不敢自比孔乙己，这里搜集一些 Python 的茴香豆，以飨各位码农。</p>
<p>首先准备一个函数，用来生成用于测试的 DataFrame 。这个 DataFrame 有 3 列，名称分别为 a 、 b 和 c 。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df = pd.DataFrame(&#123;<span class="string">&#x27;a&#x27;</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], <span class="string">&#x27;b&#x27;</span>:[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>], <span class="string">&#x27;c&#x27;</span>:[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df</span><br><span class="line">   a  b  c</span><br><span class="line"><span class="number">0</span>  <span class="number">1</span>  <span class="number">4</span>  <span class="number">7</span></span><br><span class="line"><span class="number">1</span>  <span class="number">2</span>  <span class="number">5</span>  <span class="number">8</span></span><br><span class="line"><span class="number">2</span>  <span class="number">3</span>  <span class="number">6</span>  <span class="number">9</span></span><br></pre></td></tr></table></figure>

<p>BOSS 的要求是把每一行的 a ， b 打印出来，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 4</span><br><span class="line">2 5</span><br><span class="line">3 6</span><br></pre></td></tr></table></figure>

<h1 id="茴香豆一：-iterrows"><a href="#茴香豆一：-iterrows" class="headerlink" title="茴香豆一： iterrows"></a>茴香豆一： iterrows</h1><p>DataFrame 有一个函数，专门就是用来遍历所有的行的：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> index, row <span class="keyword">in</span> df.iterrows():</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>   <span class="built_in">print</span>(row[<span class="string">&#x27;a&#x27;</span>], row[<span class="string">&#x27;b&#x27;</span>])</span><br><span class="line"><span class="number">1</span> <span class="number">4</span></span><br><span class="line"><span class="number">2</span> <span class="number">5</span></span><br><span class="line"><span class="number">3</span> <span class="number">6</span></span><br></pre></td></tr></table></figure>

<p>这个函数简单明了，似乎不错，但是有一个致命的弱点：一般情况下会比较慢，在行数较多的情况下，那个什么，会怀疑人生。</p>
<span id="more"></span>

<h1 id="茴香豆二：-itertuples"><a href="#茴香豆二：-itertuples" class="headerlink" title="茴香豆二： itertuples"></a>茴香豆二： itertuples</h1><p>iterrows 有一个兄弟 itertuples ，可以把 DataFrame 变成 namedtuples ，这样速度上就更快了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> row <span class="keyword">in</span> df.itertuples(index=<span class="literal">True</span>, name=<span class="string">&#x27;hxd&#x27;</span>):</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>   <span class="built_in">print</span>(row.a, row.b)</span><br><span class="line"><span class="number">1</span> <span class="number">4</span></span><br><span class="line"><span class="number">2</span> <span class="number">5</span></span><br><span class="line"><span class="number">3</span> <span class="number">6</span></span><br></pre></td></tr></table></figure>

<p>当然金无足赤，在使用的时候也有要注意的地方，最主要的是当 DataFrame 的列名称有 Python 保留字的时候，列名会被自动转变，例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>df = pd.DataFrame(&#123;<span class="string">&#x27;in&#x27;</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">33</span>], <span class="string">&#x27;b&#x27;</span>:[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>], <span class="string">&#x27;c&#x27;</span>:[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> row <span class="keyword">in</span> df.itertuples(name=<span class="string">&#x27;hxd&#x27;</span>):</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>   <span class="built_in">print</span>(row)</span><br><span class="line">hxd(Index=<span class="number">0</span>, _1=<span class="number">1</span>, b=<span class="number">4</span>, c=<span class="number">7</span>)</span><br><span class="line">hxd(Index=<span class="number">1</span>, _1=<span class="number">2</span>, b=<span class="number">5</span>, c=<span class="number">8</span>)</span><br><span class="line">hxd(Index=<span class="number">2</span>, _1=<span class="number">33</span>, b=<span class="number">6</span>, c=<span class="number">9</span>)</span><br></pre></td></tr></table></figure>
<p>这个例子中， <code>in</code> 是 Python 的保留字，被自动变更为 <code>_1</code> 。</p>
<h1 id="茴香豆三：-iloc"><a href="#茴香豆三：-iloc" class="headerlink" title="茴香豆三： iloc"></a>茴香豆三： iloc</h1><p>这个有点，嗯，大拙若巧吧。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(df)):</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>   <span class="built_in">print</span> (df.iloc[i][<span class="string">&#x27;a&#x27;</span>], df.iloc[i][<span class="string">&#x27;b&#x27;</span>])</span><br><span class="line"><span class="number">1</span> <span class="number">4</span></span><br><span class="line"><span class="number">2</span> <span class="number">5</span></span><br><span class="line"><span class="number">3</span> <span class="number">6</span></span><br></pre></td></tr></table></figure>


<h1 id="茴香豆四：-to"><a href="#茴香豆四：-to" class="headerlink" title="茴香豆四： to_***"></a>茴香豆四： to_***</h1><p>DataFrame 有很多 <code>to_</code> 开头的函数，通过这些函数可以把 DataFrame 转换成其他形式，然后再加以处理，这样就可以衍生出许许多多的方法，例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> row <span class="keyword">in</span> df.to_dict(orient=<span class="string">&#x27;records&#x27;</span>):</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>   <span class="built_in">print</span>(row[<span class="string">&#x27;a&#x27;</span>], row[<span class="string">&#x27;b&#x27;</span>])</span><br></pre></td></tr></table></figure>

<p>当然， DataFrame 还有各种各样的 to_ 开头的方法，有兴趣的朋友可以尝试一下。</p>
<h1 id="茴香豆五：-不遍历"><a href="#茴香豆五：-不遍历" class="headerlink" title="茴香豆五： 不遍历"></a>茴香豆五： 不遍历</h1><p>其实对于 BOSS 的要求，有时候我们要学会说不。当然如何说不，是一门手艺，不在本文的范围之内。</p>
<p>如果只是要显示 DataFrame 的内容，那么如下的方式就足够了：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(df[[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]].to_string(index=<span class="literal">False</span>, header=<span class="literal">False</span>))</span><br><span class="line"><span class="number">1</span>  <span class="number">4</span></span><br><span class="line"><span class="number">2</span>  <span class="number">5</span></span><br><span class="line"><span class="number">3</span>  <span class="number">6</span></span><br></pre></td></tr></table></figure>

<p>如果要对每一行数据进行计算，那么应当使用 Pandas 提供的函数或者运算方法，而不是去遍历每一行数据。这是因为 Pandas 的函数是向量化的，其处理效率远高于遍历。示例如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df = pd.DataFrame(np.random.randn(<span class="number">100000</span>, <span class="number">4</span>), columns=<span class="built_in">list</span>(<span class="string">&#x27;abcd&#x27;</span>))</span><br><span class="line">timeit [row.a + row.b <span class="keyword">for</span> row <span class="keyword">in</span> df.itertuples(index=<span class="literal">False</span>)]</span><br><span class="line"><span class="number">72</span> ms ± <span class="number">1.01</span> ms per loop (mean ± std. dev. of <span class="number">7</span> runs, <span class="number">1</span> loop each)</span><br><span class="line">timeit [x+y <span class="keyword">for</span> x,y <span class="keyword">in</span> <span class="built_in">zip</span>(df[<span class="string">&#x27;a&#x27;</span>], df[<span class="string">&#x27;b&#x27;</span>])]</span><br><span class="line"><span class="number">20.3</span> ms ± <span class="number">132</span> µs per loop (mean ± std. dev. of <span class="number">7</span> runs, <span class="number">10</span> loops each)</span><br><span class="line">timeit df[<span class="string">&#x27;a&#x27;</span>] + df[<span class="string">&#x27;b&#x27;</span>]</span><br><span class="line"><span class="number">1.27</span> ms ± <span class="number">83.2</span> µs per loop (mean ± std. dev. of <span class="number">7</span> runs, <span class="number">1</span> loop each)</span><br></pre></td></tr></table></figure>

<p>从以上示例可以看出，遍历是最慢的，列表推导其次， pandas 自带的是最快的。<br>其实道理也很简单，专业的事交给专业的人去做，不要作。</p>
]]></content>
      <categories>
        <category>Python 茴香豆</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>pandas</tag>
        <tag>dataframe</tag>
        <tag>row</tag>
      </tags>
  </entry>
  <entry>
    <title>【Python茴香豆系列】之 PANDAS 变更列的类型</title>
    <url>/2021/03/26/python-bean/python-bean-pandas-change-column-type/</url>
    <content><![CDATA[<p>用 Python 编程，使用不同的方法来完成同一个目标，有时候是一件很有意思的事情。这让我想起鲁迅笔下的孔乙己。孔乙己对于茴香豆的茴字的四种写法颇有研究。我不敢自比孔乙己，这里搜集一些 Python 的茴香豆，以飨各位码农。</p>
<p>首先准备一个函数，用来生成用于测试的 DataFrame 。这个 DataFrame 有 3 列，名称分别为 a 、 b 和 c 。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br></pre></td></tr></table></figure>

<h2 id="茴香豆一：-to-numeric"><a href="#茴香豆一：-to-numeric" class="headerlink" title="茴香豆一： to_numeric()"></a>茴香豆一： to_numeric()</h2><p>这个函数可以把 scalar 、 list 、tuple 、 1-d array 或者 Series 类型的数据转换为数字类型的数据。<br>默认根据输入的参数返回 <code>float64</code> 或者 <code>int64</code> 类型。</p>
<p>把一个序列转换为数字，序列中的数据的数据类型不要求一致。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = pd.Series([<span class="string">&quot;1&quot;</span>, <span class="number">2</span>, <span class="string">&quot;3&quot;</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>pd.to_numeric(s)</span><br><span class="line"><span class="number">0</span>    <span class="number">1</span></span><br><span class="line"><span class="number">1</span>    <span class="number">2</span></span><br><span class="line"><span class="number">2</span>    <span class="number">3</span></span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure>

<p>生成一个有三个列的示例 DataFrame</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>df = pd.DataFrame(&#123;</span><br><span class="line"><span class="meta">... </span>    <span class="string">&#x27;a&#x27;</span>:[<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>],</span><br><span class="line"><span class="meta">... </span>    <span class="string">&#x27;b&#x27;</span>:[<span class="number">4</span>,<span class="string">&#x27;5.0&#x27;</span>,<span class="number">6</span>],</span><br><span class="line"><span class="meta">... </span>    <span class="string">&#x27;c&#x27;</span>:[<span class="string">&#x27;7&#x27;</span>,<span class="number">8</span>,<span class="number">9</span>]&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df.dtypes</span><br><span class="line">a    <span class="built_in">object</span></span><br><span class="line">b    <span class="built_in">object</span></span><br><span class="line">c    <span class="built_in">object</span></span><br><span class="line">dtype: <span class="built_in">object</span></span><br></pre></td></tr></table></figure>

<p>转换所有的列</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>df.apply(pd.to_numeric).dtypes</span><br><span class="line">a      int64</span><br><span class="line">b    float64</span><br><span class="line">c      int64</span><br><span class="line">dtype: <span class="built_in">object</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>

<p>只转换 a 列和 b 列</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>df[[<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>]] = df[[<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>]].apply(pd.to_numeric)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df.dtypes</span><br><span class="line">a      int64</span><br><span class="line">b    float64</span><br><span class="line">c     <span class="built_in">object</span></span><br><span class="line">dtype: <span class="built_in">object</span></span><br></pre></td></tr></table></figure>

<p><code>to_numeric</code> 的函数原型是 <code>to_numeric(arg, errors=&#39;raise&#39;, downcast=None)</code> 。 <code>errors</code> 可以控制类型转换中的出错处理。详细内容参见文档。<br>类似类型的函数还有 <code>to_datetime()</code> 和 <code>to_timedelta()</code> 。</p>
<h2 id="茴香豆二：-astype"><a href="#茴香豆二：-astype" class="headerlink" title="茴香豆二： astype()"></a>茴香豆二： astype()</h2><p>Dataframe 和 Series 的实例均有 astype 方法，可用于类型转换。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = pd.Series([<span class="string">&quot;1&quot;</span>, <span class="number">2</span>, <span class="string">&quot;3&quot;</span>])</span><br><span class="line">&gt;&gt;&gt;s.astype(<span class="built_in">int</span>)</span><br><span class="line"><span class="number">0</span>    <span class="number">1</span></span><br><span class="line"><span class="number">1</span>    <span class="number">2</span></span><br><span class="line"><span class="number">2</span>    <span class="number">3</span></span><br><span class="line">dtype: int64</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df = pd.DataFrame(&#123;</span><br><span class="line"><span class="meta">... </span>    <span class="string">&#x27;a&#x27;</span>:[<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>],</span><br><span class="line"><span class="meta">... </span>    <span class="string">&#x27;b&#x27;</span>:[<span class="number">4</span>,<span class="string">&#x27;5.0&#x27;</span>,<span class="number">6</span>],</span><br><span class="line"><span class="meta">... </span>    <span class="string">&#x27;c&#x27;</span>:[<span class="string">&#x27;7&#x27;</span>,<span class="number">8</span>,<span class="number">9</span>]&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df.astype(<span class="string">&#x27;int32&#x27;</span>, errors=<span class="string">&#x27;ignore&#x27;</span>).dtypes</span><br><span class="line">a    <span class="built_in">object</span></span><br><span class="line">b    <span class="built_in">object</span></span><br><span class="line">c    <span class="built_in">object</span></span><br><span class="line">dtype: <span class="built_in">object</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df.astype(&#123;<span class="string">&#x27;a&#x27;</span>: <span class="string">&#x27;int32&#x27;</span>&#125;).dtypes</span><br><span class="line">a     int32</span><br><span class="line">b    <span class="built_in">object</span></span><br><span class="line">c    <span class="built_in">object</span></span><br><span class="line">dtype: <span class="built_in">object</span></span><br></pre></td></tr></table></figure>

<p><code>astype</code> 方法的定义是 <code>astype(dtype, copy: bool = True, errors: str = &#39;raise&#39;)</code> ，详细内容参见文档。</p>
<h2 id="茴香豆三：-infer-objects"><a href="#茴香豆三：-infer-objects" class="headerlink" title="茴香豆三： infer_objects()"></a>茴香豆三： infer_objects()</h2><p>此方法的作用是尝试把 object 类型的列转换为更合适的类型，于 0.21.0 版本新增。示例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>df = pd.DataFrame(&#123;<span class="string">&quot;A&quot;</span>: [<span class="string">&quot;a&quot;</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line"><span class="meta">... </span>                   <span class="string">&quot;B&quot;</span>: [<span class="string">&quot;a&quot;</span>, <span class="number">1</span>, <span class="number">2.0</span>, <span class="number">3</span>]&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df.dtypes</span><br><span class="line">A    <span class="built_in">object</span></span><br><span class="line">B    <span class="built_in">object</span></span><br><span class="line">dtype: <span class="built_in">object</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df = df.iloc[<span class="number">1</span>:]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df.infer_objects().dtypes</span><br><span class="line">A      int64</span><br><span class="line">B    float64</span><br><span class="line">dtype: <span class="built_in">object</span></span><br></pre></td></tr></table></figure>

<h2 id="茴香豆四：-convert-dtypes"><a href="#茴香豆四：-convert-dtypes" class="headerlink" title="茴香豆四： convert_dtypes()"></a>茴香豆四： convert_dtypes()</h2><p>此方法的作用是尝试把列的数据类型转换为更合适的类型，于 1.0.0 版本新增。官方示例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>df = pd.DataFrame(</span><br><span class="line"><span class="meta">... </span>    &#123;</span><br><span class="line"><span class="meta">... </span>        <span class="string">&quot;a&quot;</span>: pd.Series([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], dtype=np.dtype(<span class="string">&quot;int32&quot;</span>)),</span><br><span class="line"><span class="meta">... </span>        <span class="string">&quot;b&quot;</span>: pd.Series([<span class="string">&quot;x&quot;</span>, <span class="string">&quot;y&quot;</span>, <span class="string">&quot;z&quot;</span>], dtype=np.dtype(<span class="string">&quot;O&quot;</span>)),</span><br><span class="line"><span class="meta">... </span>        <span class="string">&quot;c&quot;</span>: pd.Series([<span class="literal">True</span>, <span class="literal">False</span>, np.nan], dtype=np.dtype(<span class="string">&quot;O&quot;</span>)),</span><br><span class="line"><span class="meta">... </span>        <span class="string">&quot;d&quot;</span>: pd.Series([<span class="string">&quot;h&quot;</span>, <span class="string">&quot;i&quot;</span>, np.nan], dtype=np.dtype(<span class="string">&quot;O&quot;</span>)),</span><br><span class="line"><span class="meta">... </span>        <span class="string">&quot;e&quot;</span>: pd.Series([<span class="number">10</span>, np.nan, <span class="number">20</span>], dtype=np.dtype(<span class="string">&quot;float&quot;</span>)),</span><br><span class="line"><span class="meta">... </span>        <span class="string">&quot;f&quot;</span>: pd.Series([np.nan, <span class="number">100.5</span>, <span class="number">200</span>], dtype=np.dtype(<span class="string">&quot;float&quot;</span>)),</span><br><span class="line"><span class="meta">... </span>    &#125;</span><br><span class="line"><span class="meta">... </span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df</span><br><span class="line">   a  b      c    d     e      f</span><br><span class="line"><span class="number">0</span>  <span class="number">1</span>  x   <span class="literal">True</span>    h  <span class="number">10.0</span>    NaN</span><br><span class="line"><span class="number">1</span>  <span class="number">2</span>  y  <span class="literal">False</span>    i   NaN  <span class="number">100.5</span></span><br><span class="line"><span class="number">2</span>  <span class="number">3</span>  z    NaN  NaN  <span class="number">20.0</span>  <span class="number">200.0</span></span><br></pre></td></tr></table></figure>

<p>新建一个 DataFrame ，默认的 dtype 如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>df.dtypes</span><br><span class="line">a      int32</span><br><span class="line">b     <span class="built_in">object</span></span><br><span class="line">c     <span class="built_in">object</span></span><br><span class="line">d     <span class="built_in">object</span></span><br><span class="line">e    float64</span><br><span class="line">f    float64</span><br><span class="line">dtype: <span class="built_in">object</span></span><br></pre></td></tr></table></figure>

<p>把类型转换为最优解。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>dfn = df.convert_dtypes()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dfn</span><br><span class="line">   a  b      c     d     e      f</span><br><span class="line"><span class="number">0</span>  <span class="number">1</span>  x   <span class="literal">True</span>     h    <span class="number">10</span>    NaN</span><br><span class="line"><span class="number">1</span>  <span class="number">2</span>  y  <span class="literal">False</span>     i  &lt;NA&gt;  <span class="number">100.5</span></span><br><span class="line"><span class="number">2</span>  <span class="number">3</span>  z   &lt;NA&gt;  &lt;NA&gt;    <span class="number">20</span>  <span class="number">200.0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>dfn.dtypes</span><br><span class="line">a      Int32</span><br><span class="line">b     string</span><br><span class="line">c    boolean</span><br><span class="line">d     string</span><br><span class="line">e      Int64</span><br><span class="line">f    float64</span><br><span class="line">dtype: <span class="built_in">object</span></span><br></pre></td></tr></table></figure>

<p>新建一个字符串组成的 Series ，缺失的数据用 <code>np.nan</code> 表示。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s = pd.Series([<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, np.nan])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s</span><br><span class="line"><span class="number">0</span>      a</span><br><span class="line"><span class="number">1</span>      b</span><br><span class="line"><span class="number">2</span>    NaN</span><br><span class="line">dtype: <span class="built_in">object</span></span><br></pre></td></tr></table></figure>

<p>得到一个 dtype 为 <code>StringDtype</code> 的 Series 。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>s.convert_dtypes()</span><br><span class="line"><span class="number">0</span>       a</span><br><span class="line"><span class="number">1</span>       b</span><br><span class="line"><span class="number">2</span>    &lt;NA&gt;</span><br><span class="line">dtype: string</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python 茴香豆</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>pandas</tag>
        <tag>dataframe</tag>
        <tag>column</tag>
      </tags>
  </entry>
  <entry>
    <title>【Python茴香豆系列】之 PANDAS 修改 DataFrame 列名</title>
    <url>/2021/01/29/python-bean/python-bean-modify-dataframe-column-name/</url>
    <content><![CDATA[<p>用 Python 编程，使用不同的方法来完成同一个目标，有时候是一件很有意思的事情。这让我想起鲁迅笔下的孔乙己。孔乙己对于茴香豆的茴字的四种写法颇有研究。我不敢自比孔乙己，这里搜集一些 Python 的茴香豆，以飨各位码农。</p>
<p>首先准备一个函数，用来生成用于测试的 DataFrame 。这个 DataFrame 有 3 列，名称分别为 a 、 b 和 c 。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">get_df</span>():</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>   <span class="keyword">return</span> pd.DataFrame(&#123;<span class="string">&#x27;a&#x27;</span>:[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>], <span class="string">&#x27;b&#x27;</span>:[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>], <span class="string">&#x27;c&#x27;</span>:[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>get_df()</span><br><span class="line">   a  b  c</span><br><span class="line"><span class="number">0</span>  <span class="number">1</span>  <span class="number">4</span>  <span class="number">7</span></span><br><span class="line"><span class="number">1</span>  <span class="number">2</span>  <span class="number">5</span>  <span class="number">8</span></span><br><span class="line"><span class="number">2</span>  <span class="number">3</span>  <span class="number">6</span>  <span class="number">9</span></span><br></pre></td></tr></table></figure>

<h2 id="茴香豆一：-columns-属性"><a href="#茴香豆一：-columns-属性" class="headerlink" title="茴香豆一： columns 属性"></a>茴香豆一： columns 属性</h2><p>有一天， BOSS 说要把 DataFrame 的列名都改为大写。于是我简单粗暴地是把一个 List 丢给了 DataFrame 的 columns 属性，任务完成。示例如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>df = get_df()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df.columns=[<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df</span><br><span class="line">   A  B  C</span><br><span class="line"><span class="number">0</span>  <span class="number">1</span>  <span class="number">4</span>  <span class="number">7</span></span><br><span class="line"><span class="number">1</span>  <span class="number">2</span>  <span class="number">5</span>  <span class="number">8</span></span><br><span class="line"><span class="number">2</span>  <span class="number">3</span>  <span class="number">6</span>  <span class="number">9</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="茴香豆二：-columns-str"><a href="#茴香豆二：-columns-str" class="headerlink" title="茴香豆二： columns.str"></a>茴香豆二： columns.str</h2><p>有一天， BOSS 给我一个有 300 列的 DataFrame ，说要把列名都改为大写。显然，使用上面的方法是浪费生命的。于是我使用了 columns.str 。示例如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>df = get_df()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df.columns = df.columns.<span class="built_in">str</span>.upper()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df</span><br><span class="line">   A  B  C</span><br><span class="line"><span class="number">0</span>  <span class="number">1</span>  <span class="number">4</span>  <span class="number">7</span></span><br><span class="line"><span class="number">1</span>  <span class="number">2</span>  <span class="number">5</span>  <span class="number">8</span></span><br><span class="line"><span class="number">2</span>  <span class="number">3</span>  <span class="number">6</span>  <span class="number">9</span></span><br></pre></td></tr></table></figure>

<h2 id="茴香豆三：-rename-方法1"><a href="#茴香豆三：-rename-方法1" class="headerlink" title="茴香豆三： rename 方法1"></a>茴香豆三： rename 方法1</h2><p>有一天， BOSS 给我一个有 300 列的 DataFrame ，说要把列 a 改名为 A ，列 c 改名为 C ，其他列不变。于是我使用了 rename 方法。示例如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>df = get_df()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df.rename(columns=&#123;<span class="string">&#x27;a&#x27;</span>: <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;c&#x27;</span>: <span class="string">&#x27;C&#x27;</span>&#125;)</span><br><span class="line">   A  b  C</span><br><span class="line"><span class="number">0</span>  <span class="number">1</span>  <span class="number">4</span>  <span class="number">7</span></span><br><span class="line"><span class="number">1</span>  <span class="number">2</span>  <span class="number">5</span>  <span class="number">8</span></span><br><span class="line"><span class="number">2</span>  <span class="number">3</span>  <span class="number">6</span>  <span class="number">9</span></span><br></pre></td></tr></table></figure>

<p>rename 方法有个 inplace 参数，默认值为 False 。上例中， df 并没有改变。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>df</span><br><span class="line">   a  b  c</span><br><span class="line"><span class="number">0</span>  <span class="number">1</span>  <span class="number">4</span>  <span class="number">7</span></span><br><span class="line"><span class="number">1</span>  <span class="number">2</span>  <span class="number">5</span>  <span class="number">8</span></span><br><span class="line"><span class="number">2</span>  <span class="number">3</span>  <span class="number">6</span>  <span class="number">9</span></span><br></pre></td></tr></table></figure>

<p>如果要改变的话，需要设置 inplace 为 True 。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>df.rename(columns=&#123;<span class="string">&#x27;a&#x27;</span>: <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;c&#x27;</span>: <span class="string">&#x27;C&#x27;</span>&#125;, inplace=<span class="literal">True</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df</span><br><span class="line">   A  b  C</span><br><span class="line"><span class="number">0</span>  <span class="number">1</span>  <span class="number">4</span>  <span class="number">7</span></span><br><span class="line"><span class="number">1</span>  <span class="number">2</span>  <span class="number">5</span>  <span class="number">8</span></span><br><span class="line"><span class="number">2</span>  <span class="number">3</span>  <span class="number">6</span>  <span class="number">9</span></span><br></pre></td></tr></table></figure>

<h2 id="茴香豆四：-rename-方法2"><a href="#茴香豆四：-rename-方法2" class="headerlink" title="茴香豆四： rename 方法2"></a>茴香豆四： rename 方法2</h2><p>当然，也可以使用函数，例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>df.rename(columns=<span class="keyword">lambda</span> x:x.upper())</span><br><span class="line">   A  B  C</span><br><span class="line"><span class="number">0</span>  <span class="number">1</span>  <span class="number">4</span>  <span class="number">7</span></span><br><span class="line"><span class="number">1</span>  <span class="number">2</span>  <span class="number">5</span>  <span class="number">8</span></span><br><span class="line"><span class="number">2</span>  <span class="number">3</span>  <span class="number">6</span>  <span class="number">9</span></span><br></pre></td></tr></table></figure>

<h2 id="茴香豆五：-rename-方法3"><a href="#茴香豆五：-rename-方法3" class="headerlink" title="茴香豆五： rename 方法3"></a>茴香豆五： rename 方法3</h2><p>这里不使用 columns 参数，例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>df.rename(<span class="built_in">str</span>.upper, axis=<span class="number">1</span>)</span><br><span class="line">   A  B  C</span><br><span class="line"><span class="number">0</span>  <span class="number">1</span>  <span class="number">4</span>  <span class="number">7</span></span><br><span class="line"><span class="number">1</span>  <span class="number">2</span>  <span class="number">5</span>  <span class="number">8</span></span><br><span class="line"><span class="number">2</span>  <span class="number">3</span>  <span class="number">6</span>  <span class="number">9</span></span><br></pre></td></tr></table></figure>

<p>rename 是一个好东西，详细的用法参见：<a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.rename.htmlm">官方文档</a> 。<br>那么使用 rename 有什么好处呢？举个例子吧：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>df = get_df()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df.T.rename(columns=<span class="keyword">lambda</span> x:x+<span class="number">1</span>).T</span><br><span class="line">   a  b  c</span><br><span class="line"><span class="number">1</span>  <span class="number">1</span>  <span class="number">4</span>  <span class="number">7</span></span><br><span class="line"><span class="number">2</span>  <span class="number">2</span>  <span class="number">5</span>  <span class="number">8</span></span><br><span class="line"><span class="number">3</span>  <span class="number">3</span>  <span class="number">6</span>  <span class="number">9</span></span><br></pre></td></tr></table></figure>

<h2 id="茴香豆六：-删除再添加"><a href="#茴香豆六：-删除再添加" class="headerlink" title="茴香豆六： 删除再添加"></a>茴香豆六： 删除再添加</h2><p>如果在心情特别开心的情况下，我也许可能会考虑：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>df = get_df()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> k, v <span class="keyword">in</span> &#123;<span class="string">&#x27;a&#x27;</span>: <span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;b&#x27;</span>: <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;c&#x27;</span>: <span class="string">&#x27;C&#x27;</span>&#125;.items():</span><br><span class="line"><span class="meta">... </span>    df[v] = df.pop(k)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df</span><br><span class="line">   A  B  C</span><br><span class="line"><span class="number">0</span>  <span class="number">1</span>  <span class="number">4</span>  <span class="number">7</span></span><br><span class="line"><span class="number">1</span>  <span class="number">2</span>  <span class="number">5</span>  <span class="number">8</span></span><br><span class="line"><span class="number">2</span>  <span class="number">3</span>  <span class="number">6</span>  <span class="number">9</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python 茴香豆</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>pandas</tag>
        <tag>dataframe</tag>
        <tag>column</tag>
      </tags>
  </entry>
  <entry>
    <title>【Python茴香豆系列】之 PANDAS 如何根据列的值来选取 DataFrame 的行</title>
    <url>/2021/03/12/python-bean/python-bean-select-dataframe-row/</url>
    <content><![CDATA[<p>用 Python 编程，使用不同的方法来完成同一个目标，有时候是一件很有意思的事情。<br>这让我想起鲁迅笔下的孔乙己。孔乙己对于茴香豆的茴字的四种写法颇有研究。我不<br>敢自比孔乙己，这里搜集一些 Python 的茴香豆，以飨各位码农。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> column_name <span class="operator">=</span> <span class="keyword">value</span></span><br></pre></td></tr></table></figure>

<p>上面的 SQL 语句可以用来在数据库中根据字段的值选取符合条件的记录，那么在 DataFrame 中如何根据列的值来选取行呢？</p>
<p>本文测试数据来源：<a href="https://raw.github.com/pandas-dev/pandas/master/pandas/tests/io/data/csv/tips.csv">https://raw.github.com/pandas-dev/pandas/master/pandas/tests/io/data/csv/tips.csv</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df = pd.read_csv(<span class="string">&#x27;tips.csv&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df.head()</span><br><span class="line">   total_bill   tip     sex smoker  day    time  size</span><br><span class="line"><span class="number">0</span>       <span class="number">16.99</span>  <span class="number">1.01</span>  Female     No  Sun  Dinner     <span class="number">2</span></span><br><span class="line"><span class="number">1</span>       <span class="number">10.34</span>  <span class="number">1.66</span>    Male     No  Sun  Dinner     <span class="number">3</span></span><br><span class="line"><span class="number">2</span>       <span class="number">21.01</span>  <span class="number">3.50</span>    Male     No  Sun  Dinner     <span class="number">3</span></span><br><span class="line"><span class="number">3</span>       <span class="number">23.68</span>  <span class="number">3.31</span>    Male     No  Sun  Dinner     <span class="number">2</span></span><br><span class="line"><span class="number">4</span>       <span class="number">24.59</span>  <span class="number">3.61</span>  Female     No  Sun  Dinner     <span class="number">4</span></span><br></pre></td></tr></table></figure>

<h2 id="茴香豆一：-索引"><a href="#茴香豆一：-索引" class="headerlink" title="茴香豆一： []索引"></a>茴香豆一： []索引</h2><p>最直观的方法是通过逻辑条件来筛选行。 在逻辑条件中，等于用 <code>==</code> ，不等于用 <code>!=</code> ，还有 <code>&gt;</code> 、 <code>&lt;</code> 、 <code>&gt;=</code> 和 <code>&lt;=</code> 。 多个条件组合的情况下，与用 <code>&amp;</code> ， 或用 <code>|</code> ，非用 <code>~</code> 。 是否在某个范围内用 <code>isin</code> 。 示例如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>mask = [<span class="literal">False</span>] * <span class="number">244</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mask[<span class="number">1</span>] = <span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>mask[<span class="number">3</span>] = <span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df[mask]</span><br><span class="line">   total_bill   tip   sex smoker  day    time  size</span><br><span class="line"><span class="number">1</span>       <span class="number">10.34</span>  <span class="number">1.66</span>  Male     No  Sun  Dinner     <span class="number">3</span></span><br><span class="line"><span class="number">3</span>       <span class="number">23.68</span>  <span class="number">3.31</span>  Male     No  Sun  Dinner     <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 选取性别为男性的行</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df[df[<span class="string">&#x27;sex&#x27;</span>] == <span class="string">&#x27;Male&#x27;</span>].head()</span><br><span class="line">   total_bill   tip   sex smoker  day    time  size</span><br><span class="line"><span class="number">1</span>       <span class="number">10.34</span>  <span class="number">1.66</span>  Male     No  Sun  Dinner     <span class="number">3</span></span><br><span class="line"><span class="number">2</span>       <span class="number">21.01</span>  <span class="number">3.50</span>  Male     No  Sun  Dinner     <span class="number">3</span></span><br><span class="line"><span class="number">3</span>       <span class="number">23.68</span>  <span class="number">3.31</span>  Male     No  Sun  Dinner     <span class="number">2</span></span><br><span class="line"><span class="number">5</span>       <span class="number">25.29</span>  <span class="number">4.71</span>  Male     No  Sun  Dinner     <span class="number">4</span></span><br><span class="line"><span class="number">6</span>        <span class="number">8.77</span>  <span class="number">2.00</span>  Male     No  Sun  Dinner     <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 选取小费超过 2 ，或者性别为女性的行</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df[(df[<span class="string">&#x27;tip&#x27;</span>]&gt;<span class="number">2</span>) | (df[<span class="string">&#x27;sex&#x27;</span>]==<span class="string">&#x27;Female&#x27;</span>)].head()</span><br><span class="line">   total_bill   tip     sex smoker  day    time  size</span><br><span class="line"><span class="number">0</span>       <span class="number">16.99</span>  <span class="number">1.01</span>  Female     No  Sun  Dinner     <span class="number">2</span></span><br><span class="line"><span class="number">2</span>       <span class="number">21.01</span>  <span class="number">3.50</span>    Male     No  Sun  Dinner     <span class="number">3</span></span><br><span class="line"><span class="number">3</span>       <span class="number">23.68</span>  <span class="number">3.31</span>    Male     No  Sun  Dinner     <span class="number">2</span></span><br><span class="line"><span class="number">4</span>       <span class="number">24.59</span>  <span class="number">3.61</span>  Female     No  Sun  Dinner     <span class="number">4</span></span><br><span class="line"><span class="number">5</span>       <span class="number">25.29</span>  <span class="number">4.71</span>    Male     No  Sun  Dinner     <span class="number">4</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>

<h2 id="茴香豆二：-标签索引"><a href="#茴香豆二：-标签索引" class="headerlink" title="茴香豆二： 标签索引"></a>茴香豆二： 标签索引</h2><p>标签索引接受布尔数组作为输入，所以使用行索引的标签可以筛选行。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 选取性别为男性的行</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df.loc[df[<span class="string">&#x27;sex&#x27;</span>] == <span class="string">&#x27;Male&#x27;</span>].head()</span><br><span class="line">   total_bill   tip   sex smoker  day    time  size</span><br><span class="line"><span class="number">1</span>       <span class="number">10.34</span>  <span class="number">1.66</span>  Male     No  Sun  Dinner     <span class="number">3</span></span><br><span class="line"><span class="number">2</span>       <span class="number">21.01</span>  <span class="number">3.50</span>  Male     No  Sun  Dinner     <span class="number">3</span></span><br><span class="line"><span class="number">3</span>       <span class="number">23.68</span>  <span class="number">3.31</span>  Male     No  Sun  Dinner     <span class="number">2</span></span><br><span class="line"><span class="number">5</span>       <span class="number">25.29</span>  <span class="number">4.71</span>  Male     No  Sun  Dinner     <span class="number">4</span></span><br><span class="line"><span class="number">6</span>        <span class="number">8.77</span>  <span class="number">2.00</span>  Male     No  Sun  Dinner     <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 选取小费超过 2 ，或者性别为女性的行</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df.loc[(df[<span class="string">&#x27;tip&#x27;</span>]&gt;<span class="number">2</span>) | (df[<span class="string">&#x27;sex&#x27;</span>]==<span class="string">&#x27;Female&#x27;</span>)].head()</span><br><span class="line">   total_bill   tip     sex smoker  day    time  size</span><br><span class="line"><span class="number">0</span>       <span class="number">16.99</span>  <span class="number">1.01</span>  Female     No  Sun  Dinner     <span class="number">2</span></span><br><span class="line"><span class="number">2</span>       <span class="number">21.01</span>  <span class="number">3.50</span>    Male     No  Sun  Dinner     <span class="number">3</span></span><br><span class="line"><span class="number">3</span>       <span class="number">23.68</span>  <span class="number">3.31</span>    Male     No  Sun  Dinner     <span class="number">2</span></span><br><span class="line"><span class="number">4</span>       <span class="number">24.59</span>  <span class="number">3.61</span>  Female     No  Sun  Dinner     <span class="number">4</span></span><br><span class="line"><span class="number">5</span>       <span class="number">25.29</span>  <span class="number">4.71</span>    Male     No  Sun  Dinner     <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 选择不是周末，且小费大于 5 的行</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df.loc[~df[<span class="string">&#x27;day&#x27;</span>].isin([<span class="string">&#x27;Sun&#x27;</span>, <span class="string">&#x27;Sat&#x27;</span>]) &amp; (df[<span class="string">&#x27;tip&#x27;</span>]&gt;<span class="number">5</span>)]</span><br><span class="line">     total_bill   tip     sex smoker   day   time  size</span><br><span class="line"><span class="number">85</span>        <span class="number">34.83</span>  <span class="number">5.17</span>  Female     No  Thur  Lunch     <span class="number">4</span></span><br><span class="line"><span class="number">88</span>        <span class="number">24.71</span>  <span class="number">5.85</span>    Male     No  Thur  Lunch     <span class="number">2</span></span><br><span class="line"><span class="number">141</span>       <span class="number">34.30</span>  <span class="number">6.70</span>    Male     No  Thur  Lunch     <span class="number">6</span></span><br></pre></td></tr></table></figure>

<h2 id="茴香豆三：-位置索引"><a href="#茴香豆三：-位置索引" class="headerlink" title="茴香豆三： 位置索引"></a>茴香豆三： 位置索引</h2><p>位置索引接受布尔数组作为输入，所以使用行索引的位置可以筛选行。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>mask = <span class="built_in">list</span>(df[<span class="string">&#x27;sex&#x27;</span>] == <span class="string">&#x27;Male&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df.iloc[mask].head()</span><br><span class="line">   total_bill   tip   sex smoker  day    time  size</span><br><span class="line"><span class="number">1</span>       <span class="number">10.34</span>  <span class="number">1.66</span>  Male     No  Sun  Dinner     <span class="number">3</span></span><br><span class="line"><span class="number">2</span>       <span class="number">21.01</span>  <span class="number">3.50</span>  Male     No  Sun  Dinner     <span class="number">3</span></span><br><span class="line"><span class="number">3</span>       <span class="number">23.68</span>  <span class="number">3.31</span>  Male     No  Sun  Dinner     <span class="number">2</span></span><br><span class="line"><span class="number">5</span>       <span class="number">25.29</span>  <span class="number">4.71</span>  Male     No  Sun  Dinner     <span class="number">4</span></span><br><span class="line"><span class="number">6</span>        <span class="number">8.77</span>  <span class="number">2.00</span>  Male     No  Sun  Dinner     <span class="number">2</span></span><br></pre></td></tr></table></figure>

<h2 id="茴香豆四：-调用函数"><a href="#茴香豆四：-调用函数" class="headerlink" title="茴香豆四： 调用函数"></a>茴香豆四： 调用函数</h2><p>以上三种索引都可以使用函数，函数你懂的。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>df[<span class="keyword">lambda</span> df: df[<span class="string">&#x27;tip&#x27;</span>]&gt;<span class="number">5</span>].head()</span><br><span class="line">    total_bill   tip     sex smoker  day    time  size</span><br><span class="line"><span class="number">23</span>       <span class="number">39.42</span>  <span class="number">7.58</span>    Male     No  Sat  Dinner     <span class="number">4</span></span><br><span class="line"><span class="number">44</span>       <span class="number">30.40</span>  <span class="number">5.60</span>    Male     No  Sun  Dinner     <span class="number">4</span></span><br><span class="line"><span class="number">47</span>       <span class="number">32.40</span>  <span class="number">6.00</span>    Male     No  Sun  Dinner     <span class="number">4</span></span><br><span class="line"><span class="number">52</span>       <span class="number">34.81</span>  <span class="number">5.20</span>  Female     No  Sun  Dinner     <span class="number">4</span></span><br><span class="line"><span class="number">59</span>       <span class="number">48.27</span>  <span class="number">6.73</span>    Male     No  Sat  Dinner     <span class="number">4</span></span><br></pre></td></tr></table></figure>

<h2 id="茴香豆五：-query"><a href="#茴香豆五：-query" class="headerlink" title="茴香豆五： query"></a>茴香豆五： query</h2><p>这个嘛，熟悉 SQL 的一定喜欢。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 选取小费超过 2 ，或者性别为女性的行</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df.query(<span class="string">&#x27;tip&gt;2 | sex==&quot;Female&quot;&#x27;</span>).head()</span><br><span class="line">   total_bill   tip     sex smoker  day    time  size</span><br><span class="line"><span class="number">0</span>       <span class="number">16.99</span>  <span class="number">1.01</span>  Female     No  Sun  Dinner     <span class="number">2</span></span><br><span class="line"><span class="number">2</span>       <span class="number">21.01</span>  <span class="number">3.50</span>    Male     No  Sun  Dinner     <span class="number">3</span></span><br><span class="line"><span class="number">3</span>       <span class="number">23.68</span>  <span class="number">3.31</span>    Male     No  Sun  Dinner     <span class="number">2</span></span><br><span class="line"><span class="number">4</span>       <span class="number">24.59</span>  <span class="number">3.61</span>  Female     No  Sun  Dinner     <span class="number">4</span></span><br><span class="line"><span class="number">5</span>       <span class="number">25.29</span>  <span class="number">4.71</span>    Male     No  Sun  Dinner     <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># 选择不是周末，且小费大于 5 的行</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="comment"># @可以引用当前环境中的变量</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>weekday = [<span class="string">&#x27;Sun&#x27;</span>, <span class="string">&#x27;Sat&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>df.query(<span class="string">&#x27;day not in @weekday &amp; tip&gt;5&#x27;</span>)</span><br><span class="line">     total_bill   tip     sex smoker   day   time  size</span><br><span class="line"><span class="number">85</span>        <span class="number">34.83</span>  <span class="number">5.17</span>  Female     No  Thur  Lunch     <span class="number">4</span></span><br><span class="line"><span class="number">88</span>        <span class="number">24.71</span>  <span class="number">5.85</span>    Male     No  Thur  Lunch     <span class="number">2</span></span><br><span class="line"><span class="number">141</span>       <span class="number">34.30</span>  <span class="number">6.70</span>    Male     No  Thur  Lunch     <span class="number">6</span></span><br></pre></td></tr></table></figure>

<h2 id="茴香豆六：-where"><a href="#茴香豆六：-where" class="headerlink" title="茴香豆六： where"></a>茴香豆六： where</h2><p>where 可以把不符合条件的变为 NaN，然后来一个 dropna 吧。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>df.where(df.tip&gt;<span class="number">5</span>).dropna().head()</span><br><span class="line">    total_bill   tip     sex smoker  day    time  size</span><br><span class="line"><span class="number">23</span>       <span class="number">39.42</span>  <span class="number">7.58</span>    Male     No  Sat  Dinner   <span class="number">4.0</span></span><br><span class="line"><span class="number">44</span>       <span class="number">30.40</span>  <span class="number">5.60</span>    Male     No  Sun  Dinner   <span class="number">4.0</span></span><br><span class="line"><span class="number">47</span>       <span class="number">32.40</span>  <span class="number">6.00</span>    Male     No  Sun  Dinner   <span class="number">4.0</span></span><br><span class="line"><span class="number">52</span>       <span class="number">34.81</span>  <span class="number">5.20</span>  Female     No  Sun  Dinner   <span class="number">4.0</span></span><br><span class="line"><span class="number">59</span>       <span class="number">48.27</span>  <span class="number">6.73</span>    Male     No  Sat  Dinner   <span class="number">4.0</span></span><br></pre></td></tr></table></figure>

<p>选择行的方法五花八门，这里只是列出一些关于单索引 DataFrame 的砖头而已，见笑了。详细的文档还是请移步：<a href="https://pandas.pydata.org/pandas-docs/stable/getting_started/index.html">https://pandas.pydata.org/pandas-docs/stable/getting_started/index.html</a></p>
]]></content>
      <categories>
        <category>Python 茴香豆</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>pandas</tag>
        <tag>dataframe</tag>
        <tag>row</tag>
      </tags>
  </entry>
  <entry>
    <title>【Python茴香豆系列】之 字典合并</title>
    <url>/2021/01/31/python-bean/python-bean-update-dict/</url>
    <content><![CDATA[<p>用 Python 编程，使用不同的方法来完成同一个目标，有时候是一件很有意思的事情。这让我想起鲁迅笔下的孔乙己。孔乙己对于茴香豆的茴字的四种写法颇有研究。我不敢自比孔乙己，这里搜集一些 Python 的茴香豆，以飨各位码农。</p>
<p>假设有字典 x 和字典 y ， BOSS 需要把他们合并，生成一个新的字典 z ， x 和 y 保持不变。要实现的效果如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = &#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>&#125;</span><br><span class="line">y = &#123;<span class="string">&#x27;b&#x27;</span>: <span class="number">8</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">9</span>&#125;</span><br></pre></td></tr></table></figure>

<p>经过处理后</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">z = &#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">8</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">9</span>&#125;</span><br></pre></td></tr></table></figure>

<p>作为一个超级初学者，可能的做法是：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = &#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y = &#123;<span class="string">&#x27;b&#x27;</span>: <span class="number">8</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">9</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>z = &#123;&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> k, v <span class="keyword">in</span> x.items():</span><br><span class="line">        z[k] = v</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> k, v <span class="keyword">in</span> y.items():</span><br><span class="line">        z[k] = v</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>z</span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">8</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">9</span>&#125;</span><br></pre></td></tr></table></figure>

<p>任务完成！<br>但是，这样的解法显然是不入孔乙己法眼的，于是开始数茴香豆。</p>
<span id="more"></span>

<h1 id="茴香豆一：-update"><a href="#茴香豆一：-update" class="headerlink" title="茴香豆一： update"></a>茴香豆一： update</h1><p>如果你的 Python 版本小于等于 3.4 ，那么如下方法应该是最常见的：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>z = x.copy()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>z.update(y)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>z</span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">8</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">9</span>&#125;</span><br></pre></td></tr></table></figure>

<h1 id="茴香豆二：-两个小星星"><a href="#茴香豆二：-两个小星星" class="headerlink" title="茴香豆二： 两个小星星"></a>茴香豆二： 两个小星星</h1><p>如果你已经完全抛弃了 2 ，并且 Python 版本已经大于等于 3.5 ，那么可以这样：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>z = &#123;**x, **y&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>z</span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">8</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">9</span>&#125;</span><br></pre></td></tr></table></figure>

<h1 id="茴香豆三：-一条竖杠"><a href="#茴香豆三：-一条竖杠" class="headerlink" title="茴香豆三： 一条竖杠"></a>茴香豆三： 一条竖杠</h1><p>什么？你的 Python 版本已经大于等于 3.9 了？好吧：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>z = x | y</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>z</span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">8</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">9</span>&#125;</span><br></pre></td></tr></table></figure>

<h1 id="茴香豆四：-ChainMap"><a href="#茴香豆四：-ChainMap" class="headerlink" title="茴香豆四： ChainMap"></a>茴香豆四： ChainMap</h1><p>ChainMap 可能对大多数开发者来说有点陌生，其特点是：“先入为主”，所以要注意两个字典的顺序。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> ChainMap</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>z = <span class="built_in">dict</span>(ChainMap(y, x))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>z</span><br><span class="line">&#123;<span class="string">&#x27;a&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;b&#x27;</span>: <span class="number">8</span>, <span class="string">&#x27;c&#x27;</span>: <span class="number">9</span>&#125;</span><br></pre></td></tr></table></figure>

<h1 id="茴香豆五：-Dict"><a href="#茴香豆五：-Dict" class="headerlink" title="茴香豆五： Dict"></a>茴香豆五： Dict</h1><p>Dict 是个好东西，下面是一些示例。但是，本人并不推荐使用。</p>
<p>为什么？不够优雅。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>z = <span class="built_in">dict</span>(x, **y)  <span class="comment"># 仅限于字典的 Key 均为 string 时有效</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>z = <span class="built_in">dict</span>(x.items() + y.items())  <span class="comment"># Python 2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>z = <span class="built_in">dict</span>(x.items() | y.items())</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python 茴香豆</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>dict</tag>
      </tags>
  </entry>
  <entry>
    <title>Python Note 100 - File</title>
    <url>/2017/02/13/python-note/100file/</url>
    <content><![CDATA[<h1 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a>打开文件</h1><p>打开文件示例:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;/tmp/foo.txt&quot;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    data = file.read()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;examples/favorite-people.txt&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> a_file:</span><br><span class="line">    <span class="keyword">for</span> a_line <span class="keyword">in</span> a_file:</span><br><span class="line">        line_number += <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;&#123;:&gt;4&#125; &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(line_number, a_line.rstrip()))</span><br></pre></td></tr></table></figure>

<p>使用字符串的 format() 方法可以打印出行号和行自身。格式说明符 {:&gt;4} 的意思是:使用最多四个空格使之右对齐，然后打印此参数。</p>
<p>变量 a_line 是包括回车符等在内的完整的一行。字符串方法rstrip()可以去掉尾随的空白符，包括回车符。</p>
<span id="more"></span>


<h1 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h1><p>写入文件示例:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(csvfile, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.writelines(linelist)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure>

<h1 id="关于-open-模式"><a href="#关于-open-模式" class="headerlink" title="关于 open 模式"></a>关于 open 模式</h1><p>open 的模式如下表：</p>
<table>
<thead>
<tr>
<th>模式</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>r</td>
<td>以读方式打开</td>
</tr>
<tr>
<td>w</td>
<td>以写方式打开</td>
</tr>
<tr>
<td>a</td>
<td>以追加模式打开 (从 EOF 开始, 必要时创建新文件)</td>
</tr>
<tr>
<td>r+</td>
<td>以读写模式打开</td>
</tr>
<tr>
<td>w+</td>
<td>以读写模式打开 (参见 w )</td>
</tr>
<tr>
<td>a+</td>
<td>以读写模式打开 (参见 a )</td>
</tr>
<tr>
<td>rb</td>
<td>以二进制读模式打开</td>
</tr>
<tr>
<td>wb</td>
<td>以二进制写模式打开 (参见 w )</td>
</tr>
<tr>
<td>ab</td>
<td>以二进制追加模式打开 (参见 a )</td>
</tr>
<tr>
<td>rb+</td>
<td>以二进制读写模式打开 (参见 r+ )</td>
</tr>
<tr>
<td>wb+</td>
<td>以二进制读写模式打开 (参见 w+ )</td>
</tr>
<tr>
<td>ab+</td>
<td>以二进制读写模式打开 (参见 a+ )</td>
</tr>
</tbody></table>
<h1 id="相关函数"><a href="#相关函数" class="headerlink" title="相关函数"></a>相关函数</h1><ul>
<li> fp.read([size]) #size为读取的长度，以byte为单位</li>
<li>fp.readline([size])<br> #读一行，如果定义了size，有可能返回的只是一行的一部分</li>
<li>fp.readlines([size])<br> #把文件每一行作为一个list的一个成员，并返回这个list。其实它的内部是通过循环调用readline()来实现的。如果提供size参数，size是表示读取内容的总长，也就是说可能只读到文件的一部分。</li>
<li> fp.write(str) #把str写到文件中，write()并不会在str后加上一个换行符</li>
<li>fp.writelines(seq)<br> #把seq的内容全部写到文件中(多行一次性写入)。这个函数也只是忠实地写入，不会在每行后面加上任何东西。</li>
<li>fp.close()<br> #关闭文件。python会在一个文件不用后自动关闭文件，不过这一功能没有保证，最好还是养成自己关闭的习惯。<br> 如果一个文件在关闭后还对其进行操作会产生ValueError</li>
<li> fp.flush() #把缓冲区的内容写入硬盘</li>
<li> fp.fileno() #返回一个长整型的”文件标签“</li>
<li> fp.isatty() #文件是否是一个终端设备文件（unix系统中的）</li>
<li> fp.tell() #返回文件操作标记的当前位置，以文件的开头为原点</li>
<li>fp.next()<br> #返回下一行，并将文件操作标记位移到下一行。把一个file用于for … in<br> file这样的语句时，就是调用next()函数来实现遍历的。</li>
<li>fp.seek(offset[,whence])<br> #将文件打操作标记移到offset的位置。这个offset一般是相对于文件的开头来计算的，一般为正数。但如果提供了whence参数就不一定了，whence可以为0表示从头开始计算，1表示以当前位置为原点计算。2表示以文件末尾为原点进行计算。需要注意，如果文件以a或a+的模式打开，每次进行写操作时，文件操作标记会自动返回到文件末尾。</li>
<li>fp.truncate([size])<br> #把文件裁成规定的大小，默认的是裁到当前文件操作标记的位置。如果size比文件的大小还要大，依据系统的不同可能是不改变文件，也可能是用0把文件补到相应的大小，也可能是以一些随机的内容加上去。</li>
</ul>
<h1 id="shutil-操作"><a href="#shutil-操作" class="headerlink" title="shutil 操作"></a>shutil 操作</h1><p>复制文件：</p>
<ul>
<li>shutil.copyfile(“oldfile”,”newfile”) oldfile 和 newfile<br> 都只能是文件。</li>
<li>shutil.copy(“oldfile”,”newfile”) oldfile 只能是文件夹， newfile<br> 可以是文件， 也可以是目标目录</li>
</ul>
<p>复制文件夹：</p>
<ul>
<li>shutil.copytree(“olddir”,”newdir”)<br> olddir和newdir都只能是目录，且newdir必须不存在</li>
</ul>
<p>移动文件（目录）：</p>
<ul>
<li> shutil.move(“oldpos”,”newpos”)</li>
</ul>
<p>删除目录：</p>
<ul>
<li> shutil.rmtree(“dir”) 空目录、有内容的目录都可以删</li>
</ul>
<h1 id="os-和-os-path-模块"><a href="#os-和-os-path-模块" class="headerlink" title="os 和 os.path 模块"></a>os 和 os.path 模块</h1><ul>
<li> os.mkdir(“file”)：创建目录</li>
<li> os.rmdir(“dir”)：只能删除空目录</li>
<li> os.listdir(dirname)：列出dirname下的目录和文件</li>
<li> os.getcwd()：获得当前工作目录</li>
<li> os.curdir：返回当前目录（’.’)</li>
<li> os.chdir(dirname)：改变工作目录到dirname</li>
<li> os.remove(“file”)：删除文件</li>
<li> os.rename(“oldname”,”newname”)：重命名文件（目录），文件或目录都是使用这条命令</li>
<li> os.path.isdir(name)：判断name是不是一个目录，name不是目录就返回false</li>
<li> os.path.isfile(name)：判断name是不是一个文件，不存在name也返回false</li>
<li> os.path.exists(name)：判断是否存在文件或目录name</li>
<li> os.path.getsize(name)：获得文件大小，如果name是目录返回0L</li>
<li> os.path.abspath(name)：获得绝对路径</li>
<li> os.path.normpath(path)：规范path字符串形式</li>
<li>os.path.split(name)：分割文件名与目录（事实上，如果你完全使用目录，它也<br> 会将最后一个目录作为文件名而分离，同时它不会判断文件或目录是否存在）</li>
<li> os.path.splitext()：分离文件名与扩展名，返回一个tuple：(“aaa”,”.txt”)</li>
<li> os.path.join(path,name)：连接目录与文件名或目录</li>
<li> os.path.basename(path)：返回文件名</li>
<li> os.path.dirname(path)：返回文件路径</li>
</ul>
<h1 id="获得同一后缀名的文件"><a href="#获得同一后缀名的文件" class="headerlink" title="获得同一后缀名的文件"></a>获得同一后缀名的文件</h1><p>示例:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"><span class="keyword">for</span> filename <span class="keyword">in</span> glob.glob(<span class="string">&quot;*.xls&quot;</span>):</span><br><span class="line">     <span class="built_in">print</span> filename</span><br></pre></td></tr></table></figure>

<h1 id="获得文件的权限"><a href="#获得文件的权限" class="headerlink" title="获得文件的权限"></a>获得文件的权限</h1><p>示例:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;import <span class="built_in">stat</span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;import os</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;oct(stat.S_IMODE(os.lstat(<span class="string">&quot;soft&quot;</span>).st_mode))</span></span><br><span class="line">&#x27;0755&#x27;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;oct(os.stat(<span class="string">&quot;soft&quot;</span>)[stat.ST_MODE])</span></span><br><span class="line">&#x27;040755&#x27;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt;oct(os.stat(<span class="string">&quot;soft&quot;</span>).st_mode &amp; 0777)</span></span><br><span class="line">&#x27;0755&#x27;</span><br></pre></td></tr></table></figure>

<p>常用常数:</p>
<pre><code>S_IRWXU 00700   mask for file owner permissions
S_IRUSR 00400   owner has read permission
S_IWUSR 00200   owner has write permission
S_IXUSR 00100   owner has execute permission
S_IRWXG 00070   mask for group permissions
S_IRGRP 00040   group has read permission
S_IWGRP 00020   group has write permission
S_IXGRP 00010   group has execute permission
S_IRWXO 00007   mask for permissions for others (not in group)
S_IROTH 00004   others have read permission
S_IWOTH 00002   others have write permission
S_IXOTH 00001   others have execute permission
</code></pre>
]]></content>
      <categories>
        <category>Development</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>note</tag>
        <tag>file</tag>
      </tags>
  </entry>
  <entry>
    <title>Python Note 200 - List</title>
    <url>/2017/02/13/python-note/200list/</url>
    <content><![CDATA[<h1 id="列表推导（过滤）"><a href="#列表推导（过滤）" class="headerlink" title="列表推导（过滤）"></a>列表推导（过滤）</h1><p>以过滤偶数为例，一般方法:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">numbers = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">even = []</span><br><span class="line"><span class="keyword">for</span> number <span class="keyword">in</span> numbers:</span><br><span class="line">    <span class="keyword">if</span> number%<span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">        even.append(number)</span><br></pre></td></tr></table></figure>

<p>推导方式过滤:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">numbers = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">even = [number <span class="keyword">for</span> number <span class="keyword">in</span> numbers <span class="keyword">if</span> number%<span class="number">2</span> == <span class="number">0</span>]</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h1 id="倒序列表"><a href="#倒序列表" class="headerlink" title="倒序列表"></a>倒序列表</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst.reverse()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst</span><br><span class="line">[<span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a[::-<span class="number">1</span>]</span><br><span class="line">[<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lst = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(<span class="built_in">reversed</span>(lst))</span><br><span class="line">[<span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure>

<h1 id="判断一个列表是否为空"><a href="#判断一个列表是否为空" class="headerlink" title="判断一个列表是否为空"></a>判断一个列表是否为空</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> mylist:</span><br><span class="line">    <span class="comment"># Do something with my list</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="comment"># The list is empty</span></span><br></pre></td></tr></table></figure>

<h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><p>列表排序有两种方式，一种是列表自带的方式 sort，一种是内建函数 sorted 。<br>复杂的数据类型可通过指定 key 参数进行排序。<br>由字典构成的列表，根据字典元素中的 age 字段进行排序:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">items = [&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Homer&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">39</span>&#125;,</span><br><span class="line">         &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Bart&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">10</span>&#125;,</span><br><span class="line">         &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&#x27;cater&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>&#125;]</span><br><span class="line">items.sort(key=<span class="keyword">lambda</span> item: item.get(<span class="string">&quot;age&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(items)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[&#123;<span class="string">&#x27;age&#x27;</span>: <span class="number">10</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Bart&#x27;</span>&#125;, &#123;<span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;cater&#x27;</span>&#125;, &#123;<span class="string">&#x27;age&#x27;</span>: <span class="number">39</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Homer&#x27;</span>&#125;]</span><br></pre></td></tr></table></figure>

<p>sort 方法用于对原列表进行重新排序，指定 key 参数，key 是匿名函数， item<br>是列表中的字典元素，我们根据字典中的age进行排序，默认是按升序排列， 指定<br>reverse=True 按降序排列:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">items.sort(key=<span class="keyword">lambda</span> item: item.get(<span class="string">&quot;age&quot;</span>), reverse=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Homer&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">39</span>&#125;, &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;cater&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>&#125;, &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Bart&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">10</span>&#125;]</span><br></pre></td></tr></table></figure>

<p>如果不希望改变原列表，而是生成一个新的有序列表对象，那么可以内置函数<br>sorted ， 该函数返回新列表:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">items = [&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Homer&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">39</span>&#125;,</span><br><span class="line">         &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Bart&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">10</span>&#125;,</span><br><span class="line">         &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&#x27;cater&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>&#125;]</span><br><span class="line">new_items = <span class="built_in">sorted</span>(items, key=<span class="keyword">lambda</span> item: item.get(<span class="string">&quot;age&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(items)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Homer&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">39</span>&#125;, &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Bart&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">10</span>&#125;, &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;cater&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>&#125;]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(new_items)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Bart&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">10</span>&#125;, &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;cater&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">20</span>&#125;, &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Homer&#x27;</span>, <span class="string">&#x27;age&#x27;</span>: <span class="number">39</span>&#125;]</span><br></pre></td></tr></table></figure>

<h1 id="同时迭代两个列表"><a href="#同时迭代两个列表" class="headerlink" title="同时迭代两个列表"></a>同时迭代两个列表</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">nfc = [<span class="string">&quot;Packers&quot;</span>, <span class="string">&quot;49ers&quot;</span>]</span><br><span class="line">afc = [<span class="string">&quot;Ravens&quot;</span>, <span class="string">&quot;Patriots&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> teama, teamb <span class="keyword">in</span> <span class="built_in">zip</span>(nfc, afc):</span><br><span class="line">    <span class="built_in">print</span> teama + <span class="string">&quot; vs. &quot;</span> + teamb</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Packers vs. Ravens</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>49ers vs. Patriots</span><br></pre></td></tr></table></figure>

<h1 id="带索引的列表迭代"><a href="#带索引的列表迭代" class="headerlink" title="带索引的列表迭代"></a>带索引的列表迭代</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">teams = [<span class="string">&quot;Packers&quot;</span>, <span class="string">&quot;49ers&quot;</span>, <span class="string">&quot;Ravens&quot;</span>, <span class="string">&quot;Patriots&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> index, team <span class="keyword">in</span> <span class="built_in">enumerate</span>(teams):</span><br><span class="line">    <span class="built_in">print</span> index, team</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">0</span> Packers</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span> 49ers</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span> Ravens</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3</span> Patriots</span><br></pre></td></tr></table></figure>

<p>enumerate 还可以指定元素的第一个元素从几开始，默认是0，也可以指定从1开始：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">teams = [<span class="string">&quot;Packers&quot;</span>, <span class="string">&quot;49ers&quot;</span>, <span class="string">&quot;Ravens&quot;</span>, <span class="string">&quot;Patriots&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> index, team <span class="keyword">in</span> <span class="built_in">enumerate</span>(teams, start=<span class="number">1</span>):</span><br><span class="line">    <span class="built_in">print</span> index, team</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span> Packers</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span> 49ers</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3</span> Ravens</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">4</span> Patriots</span><br></pre></td></tr></table></figure>

<h1 id="初始化列表的值"><a href="#初始化列表的值" class="headerlink" title="初始化列表的值"></a>初始化列表的值</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">items = [<span class="number">0</span>]*<span class="number">3</span></span><br><span class="line"><span class="built_in">print</span> items</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br></pre></td></tr></table></figure>

<h1 id="列表转换为字符串"><a href="#列表转换为字符串" class="headerlink" title="列表转换为字符串"></a>列表转换为字符串</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">teams = [<span class="string">&quot;Packers&quot;</span>, <span class="string">&quot;49ers&quot;</span>, <span class="string">&quot;Ravens&quot;</span>, <span class="string">&quot;Patriots&quot;</span>]</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;, &quot;</span>.join(teams)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;Packers, 49ers, Ravens, Patriots&#x27;</span></span><br></pre></td></tr></table></figure>

<h1 id="获取列表的子集"><a href="#获取列表的子集" class="headerlink" title="获取列表的子集"></a>获取列表的子集</h1><p>有时，你只需要列表中的部分元素，这里是一些获取列表子集的方法:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="comment">#前3个</span></span><br><span class="line"><span class="built_in">print</span> x[:<span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="comment">#中间4个</span></span><br><span class="line"><span class="built_in">print</span> x[<span class="number">1</span>:<span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="comment">#最后3个</span></span><br><span class="line"><span class="built_in">print</span> x[<span class="number">3</span>:]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="comment">#奇数项</span></span><br><span class="line"><span class="built_in">print</span> x[::<span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>]</span><br><span class="line"><span class="comment">#偶数项</span></span><br><span class="line"><span class="built_in">print</span> x[<span class="number">1</span>::<span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>]</span><br></pre></td></tr></table></figure>

<h1 id="获取两个列表的差"><a href="#获取两个列表的差" class="headerlink" title="获取两个列表的差"></a>获取两个列表的差</h1><p>示例:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>lista = [<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">1</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>listb = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">list</span>(<span class="built_in">set</span>(lista)-<span class="built_in">set</span>(listb))</span><br><span class="line">[<span class="number">9</span>, <span class="number">3</span>, <span class="number">7</span>]</span><br></pre></td></tr></table></figure>

<h1 id="拷贝一个列表"><a href="#拷贝一个列表" class="headerlink" title="拷贝一个列表"></a>拷贝一个列表</h1><p>第一种方法:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">new_list = old_list[:]</span><br></pre></td></tr></table></figure>

<p>第二种方法:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">new_list = <span class="built_in">list</span>(old_list)</span><br></pre></td></tr></table></figure>

<p>第三种方法:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"><span class="comment"># 浅拷贝</span></span><br><span class="line">new_list = copy.copy(old_list)</span><br><span class="line"><span class="comment"># 深拷贝</span></span><br><span class="line">new_list = copy.deepcopy(old_list)</span><br></pre></td></tr></table></figure>

<h1 id="移除列表中的元素"><a href="#移除列表中的元素" class="headerlink" title="移除列表中的元素"></a>移除列表中的元素</h1><p>删除列表中的元素有三种方式</p>
<p>remove 移除某个元素，而且只能移除第一次出现的元素:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.remove(<span class="number">2</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果要移除的元素不在列表中，则抛出 ValueError 异常</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.remove(<span class="number">7</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">ValueError: <span class="built_in">list</span>.remove(x): x <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">list</span>·</span><br></pre></td></tr></table></figure>

<p>del 根据指定的位置移除某元素:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">3</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line"><span class="comment"># 移除第一个元素</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> a[<span class="number">1</span>]</span><br><span class="line">[<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当超出列表的下表索引时，抛出IndexError的异常</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">del</span> a[<span class="number">7</span>]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">IndexError: <span class="built_in">list</span> assignment index out of <span class="built_in">range</span></span><br></pre></td></tr></table></figure>

<p>pop 与 del 类似，但是 pop 方法可以返回移除的元素:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">4</span>, <span class="number">3</span>, <span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.pop(<span class="number">1</span>)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 同样，当超出列表的下表索引时，抛出IndexError的异常</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.pop(<span class="number">7</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">IndexError: pop index out of <span class="built_in">range</span></span><br></pre></td></tr></table></figure>

<h1 id="连接两个列表"><a href="#连接两个列表" class="headerlink" title="连接两个列表"></a>连接两个列表</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">listone = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">listtwo = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"></span><br><span class="line">mergedlist = listone + listtwo</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(mergelist)</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br></pre></td></tr></table></figure>

<h1 id="随机获取列表中的某个元素"><a href="#随机获取列表中的某个元素" class="headerlink" title="随机获取列表中的某个元素"></a>随机获取列表中的某个元素</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">items = [<span class="number">8</span>, <span class="number">23</span>, <span class="number">45</span>, <span class="number">12</span>, <span class="number">78</span>]</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.choice(items)</span><br><span class="line"><span class="number">78</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.choice(items)</span><br><span class="line"><span class="number">45</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>random.choice(items)</span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Development</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>list</tag>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>Python Note 300 - Dict</title>
    <url>/2017/02/13/python-note/300dict/</url>
    <content><![CDATA[<h1 id="合并两个字典"><a href="#合并两个字典" class="headerlink" title="合并两个字典"></a>合并两个字典</h1><p>Python 3.5 或者以后：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">z = &#123;**x, **y&#125;</span><br></pre></td></tr></table></figure>

<p>Python 2 、或 3.4 以前：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">z = x.copy()</span><br><span class="line">z.update(y)</span><br></pre></td></tr></table></figure>

<h1 id="推导"><a href="#推导" class="headerlink" title="推导"></a>推导</h1><p>和列表推导类似，字典同样可以推导:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">teams = [<span class="string">&quot;Packers&quot;</span>, <span class="string">&quot;49ers&quot;</span>, <span class="string">&quot;Ravens&quot;</span>, <span class="string">&quot;Patriots&quot;</span>]</span><br><span class="line"><span class="built_in">print</span> &#123;key: value <span class="keyword">for</span> value, key <span class="keyword">in</span> <span class="built_in">enumerate</span>(teams)&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&#123;<span class="string">&#x27;49ers&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;Ravens&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;Patriots&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;Packers&#x27;</span>: <span class="number">0</span>&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>
<h1 id="获取元素"><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h1><p>使用字典的 get 方法可以安全的获得字典的值，第二个参数是缺省值:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = &#123;<span class="string">&#x27;user&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;Max&#x27;</span>, <span class="string">&#x27;three&#x27;</span>: <span class="number">4</span>&#125;</span><br><span class="line">is_admin = data.get(<span class="string">&#x27;admin&#x27;</span>, <span class="literal">False</span>)</span><br></pre></td></tr></table></figure>

<h1 id="元素分组"><a href="#元素分组" class="headerlink" title="元素分组"></a>元素分组</h1><p>和上面类似，先创建 Persons:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, age</span>):</span></span><br><span class="line">        self.age = age</span><br></pre></td></tr></table></figure>

<p>persons = [Person(age) for age in (78, 14, 78, 42, 14)]<br>如果现在我们要按照年龄分组的话，一种方法是使用 in 操作符:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">persons_by_age = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> person <span class="keyword">in</span> persons:</span><br><span class="line">    age = person.age</span><br><span class="line">    <span class="keyword">if</span> age <span class="keyword">in</span> persons_by_age:</span><br><span class="line">        persons_by_age[age].append(person)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        persons_by_age[age] = [person]</span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(persons_by_age[<span class="number">78</span>]) == <span class="number">2</span></span><br></pre></td></tr></table></figure>

<p>相比较之下，使用 collections 模块中 defaultdict 方法的途径可读性更好:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line">persons_by_age = defaultdict(<span class="built_in">list</span>)</span><br><span class="line"><span class="keyword">for</span> person <span class="keyword">in</span> persons:</span><br><span class="line">    persons_by_age[person.age].append(person)</span><br></pre></td></tr></table></figure>

<p>defaultdict 将会利用接受的参数为每个不存在的 key 创建对应的值，这里我们传递的是 list，所以它将为每个 key 创建一个 list 类型的值。 假如需要建立嵌套的defaultdict，d = defaultdict(defaultdict)行不通，正确的方法是d = defaultdict(lambda:defaultdict(int))。</p>
<h1 id="list-转-dict"><a href="#list-转-dict" class="headerlink" title="list 转 dict"></a>list 转 dict</h1><p>将 [‘1:a’,’2:b’,’3:c’] 转换为 {‘1′: ‘a’, ‘3′: ‘c’, ‘2′: ‘b’}:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dict</span>(item.split(<span class="string">&#x27;:&#x27;</span>)[:<span class="number">2</span>] <span class="keyword">for</span> item <span class="keyword">in</span> b)</span><br></pre></td></tr></table></figure>

<h1 id="dict-转-class"><a href="#dict-转-class" class="headerlink" title="dict 转 class"></a>dict 转 class</h1><p>方法如下:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Struct</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, **entries</span>):</span></span><br><span class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> entries.items():</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">isinstance</span>(v, <span class="built_in">dict</span>):</span><br><span class="line">                entries[k] = Struct(**v)</span><br><span class="line">                <span class="built_in">print</span> entries[k]</span><br><span class="line">        self.__dict__.update(entries)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">        args = &#123;<span class="string">&#x27;a&#x27;</span>: &#123;<span class="string">&#x27;cola&#x27;</span>: [<span class="string">&#x27;xm&#x27;</span>, <span class="string">&#x27;xb&#x27;</span>]&#125;,</span><br><span class="line">                <span class="string">&#x27;b&#x27;</span>: <span class="number">2</span>&#125;</span><br><span class="line">        s = Struct(**args)</span><br><span class="line">        <span class="built_in">print</span> s.a</span><br><span class="line">        <span class="built_in">print</span> s.a.cola</span><br><span class="line">        <span class="built_in">print</span> s.b</span><br></pre></td></tr></table></figure>



<h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><h2 id="按键排序"><a href="#按键排序" class="headerlink" title="按键排序"></a>按键排序</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">price = &#123;<span class="string">&#x27;apple&#x27;</span>: <span class="number">75.00</span>, <span class="string">&#x27;orange&#x27;</span>: <span class="number">65.00</span>, <span class="string">&#x27;banana&#x27;</span>: <span class="number">55.00</span>&#125;</span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> <span class="built_in">sorted</span>(price):</span><br><span class="line">    <span class="built_in">print</span>(key, <span class="string">&#x27;-&gt;&#x27;</span>, price[key])</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apple -&gt; 75.0</span><br><span class="line">banana -&gt; 55.0</span><br><span class="line">orange -&gt; 65.0</span><br></pre></td></tr></table></figure>

<h2 id="按值排序"><a href="#按值排序" class="headerlink" title="按值排序"></a>按值排序</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">price = &#123;<span class="string">&#x27;apple&#x27;</span>: <span class="number">75.00</span>, <span class="string">&#x27;orange&#x27;</span>: <span class="number">65.00</span>, <span class="string">&#x27;banana&#x27;</span>: <span class="number">55.00</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">by_value</span>(<span class="params">item</span>):</span></span><br><span class="line">    <span class="keyword">return</span> item[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="built_in">sorted</span>(price.items(), key=by_value):</span><br><span class="line">    <span class="built_in">print</span>(k, <span class="string">&#x27;-&gt;&#x27;</span>, v)</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="built_in">sorted</span>(price.items(), key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>]):</span><br><span class="line">    <span class="built_in">print</span>(k, <span class="string">&#x27;-&gt;&#x27;</span>, v)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">banana -&gt; 55.0</span><br><span class="line">orange -&gt; 65.0</span><br><span class="line">apple -&gt; 75.0</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Development</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>dict</tag>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>Python Note 400 - String</title>
    <url>/2017/02/13/python-note/400str/</url>
    <content><![CDATA[<ul>
<li>  capitalize() 首字符大写</li>
<li>  center(width) 返回一个原字符串居中,并使用空格填充至长度 width 的新字串<span id="more"></span></li>
<li>  count(str, beg=0, end=len(string)) 返回 str 在 string 里面出现的次数，如果 beg 或者 end 指定则返回指定范围内 str 出现的次数</li>
<li>  decode(encoding=’UTF-8’, errors=’strict’) 以 encoding 指定的编码格式解码string ，如果出错默认报一个 ValueError 的异常 ，除非 errors 指定的是 ‘ignore’ 或者 ‘replace’</li>
<li>  encode(encoding=’UTF-8’, errors=’strict’) 以 encoding 指定的编码格式编码string，如果出错默认报一个 ValueError 的异常，除非 errors 指定的是 ‘ignore’ 或者 ‘replace’</li>
<li>  endswith(obj, beg=0, end=len(string)) 检查字符串是否以 obj 结束，如果beg 或者 end 指定则检查指定的范围内是否以 obj 结束 ，如果是，返回 True ,否则返回 False.</li>
<li>  expandtabs(tabsize=8) 把字符串string中的tab符号转为空格,默认的空格数tabsize是 8.  -   find(str, beg=0, end=len(string)) 检测 str 是否包含在 string 中,如果 beg 和 end 指定范围，则检查是否包含在指定范围内 ，如果是返回开始的索引值，否则返回-1 -   index(str, beg=0, end=len(string)) 跟find()方法一样，只不过如果str不在 string中会报一个异常.</li>
<li>  isalnum() 如果 string 至少有一个字符并且所有字符都是字母或数字则返回True,否则返回 False</li>
<li>  isalpha() 如果 string 至少有一个字符并且所有字符都是字母则返回 True,否则返回 False</li>
<li>  isdecimal() 如果 string 只包含十进制数字则返回True 否则返回 False.</li>
<li>  isdigit() 如果 string 只包含数字则返回 True 否则返回 False.</li>
<li>  islower() 如果 string 中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都 是小写，则返回True，否则返回 False</li>
<li>  isnumeric() 如果 string 中只包含数字字符，则返回True，否则返回 False</li>
<li>  isspace() 如果 string 中只包含空格，则返回True，否则返回 False.</li>
<li>  istitle() 如果 string 是标题化的(见 title())则返回 True，否则返回 False</li>
<li>  isupper() 如果 string 中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是大写，则返回True，否则返回 False -   join(seq) Merges (concatenates)以 string 作为分隔符，将 seq 中所有的元素(的字符串表示)合 并为一个新的字符串</li>
<li>  ljust(width) 返回一个原字符串左对齐,并使用空格填充至长度width 的新字符串</li>
<li>  lower() 转换 string 中所有大写字符为小写</li>
<li>  lstrip() 截掉 string 左边的空格.</li>
<li>  string.partition(str) 有点像 find()和 split()的结合体,从 str 出现的第一个位置起,把字符 串string分 成一个3元素的元组(string_pre_str,str,strig_post_str),如果 string中不包含str则string_pre_str == string.</li>
<li>  replace(str1, str2,num=string.count(str1)) 把 string中的str1替换成str2,如果num指定，则替换不超过 num 次.</li>
<li>  rfind(str, beg=0,end=len(string)) 类似于 find()函数，不过是从右边开始查找.</li>
<li>  rindex( str, beg=0,end=len(string)) 类似于 index()，不过是从右边开始.</li>
<li>  rjust(width) 返回一个原字符串右对齐,并使用空格填充至长度width 的新字符串</li>
<li>  rpartition(str) 类似于 partition()函数,不过是从右边开始查找.</li>
<li>  rstrip() 删除 string 字符串末尾的空格.</li>
<li>  split(str=””, num=string.count(str)) 以 str 为分隔符切片string，如果num有指定值，则仅分隔num个子字符串</li>
<li>  splitlines(num=string.count(‘n’)) 按照行分隔，返回一个包含各行作为元素的列表，如果num指定则仅切片 num 个行.</li>
<li>  startswith(obj, beg=0,end=len(string)) 检查字符串是否是以 obj 开头，是则返回True，否则返回 False。如果beg 和 end 指定值 ，则在指定范围内检查.</li>
<li>  strip([obj]) 在string 上执行 lstrip()和 rstrip().</li>
<li>  swapcase() 翻转 string 中的大小写</li>
<li>  title() 返回”标题化”的 string,就是说所有单词都是以大写开始，其余字母均为小写(见 istitle())</li>
<li>  translate(str, del=””) 根据 str 给出的表(包含 256 个字符)转换 string 的字符,要过滤掉的字符放到 del 参数中</li>
<li>  upper() 转换 string 中的小写字母为大写</li>
<li>  zfill(width) 返回长度为width的字符串,原字符串 string 右对齐,前面填充0</li>
</ul>
]]></content>
      <categories>
        <category>Development</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>note</tag>
        <tag>string</tag>
      </tags>
  </entry>
  <entry>
    <title>Python note 500 - datetime</title>
    <url>/2017/02/13/python-note/500datetime/</url>
    <content><![CDATA[<p>Python 标准库中的 datetime 模块提供了各种对日期和时间的处理方法。</p>
<h1 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: now = datetime.datetime.now()</span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: now</span><br><span class="line">Out[<span class="number">3</span>]: datetime.datetime(<span class="number">2015</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">26</span>, <span class="number">38</span>, <span class="number">836099</span>)</span><br><span class="line"></span><br><span class="line">时间转换为字符串</span><br><span class="line">In [<span class="number">4</span>]: now.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)</span><br><span class="line">Out[<span class="number">4</span>]: <span class="string">&#x27;2015-06-01 10:26:38&#x27;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: now.replace(hour=<span class="number">0</span>,minute=<span class="number">0</span>,second=<span class="number">0</span>)</span><br><span class="line">Out[<span class="number">5</span>]: datetime.datetime(<span class="number">2015</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">836099</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: now - datetime.timedelta(days=<span class="number">1</span>)</span><br><span class="line">Out[<span class="number">6</span>]: datetime.datetime(<span class="number">2015</span>, <span class="number">5</span>, <span class="number">31</span>, <span class="number">10</span>, <span class="number">26</span>, <span class="number">38</span>, <span class="number">836099</span>)</span><br><span class="line"></span><br><span class="line">字符串转换为时间</span><br><span class="line">In [<span class="number">7</span>]: <span class="built_in">str</span> = <span class="string">&#x27;Fri, 19 May 2017 10:50:42&#x27;</span></span><br><span class="line">In [<span class="number">8</span>]: datetime.datetime.strptime(<span class="built_in">str</span>, <span class="string">&#x27;%a, %d %b %Y %H:%M:%S&#x27;</span>)</span><br><span class="line">Out[<span class="number">8</span>]: datetime.datetime(<span class="number">2017</span>, <span class="number">5</span>, <span class="number">19</span>, <span class="number">10</span>, <span class="number">50</span>, <span class="number">42</span>)</span><br><span class="line"></span><br><span class="line">struct time to timestamp</span><br><span class="line">time.mktime()</span><br><span class="line"></span><br><span class="line">time zone</span><br><span class="line">time.timezone</span><br><span class="line"></span><br><span class="line">time to loacl datetime</span><br><span class="line">datetime.fromtimestamp(time.mktime(struct_time)-time.timezone)</span><br></pre></td></tr></table></figure>

<span id="more"></span>
<p>转义符说明：</p>
<table>
<thead>
<tr>
<th>转义符</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>%a</td>
<td>本地简化星期名称</td>
</tr>
<tr>
<td>%A</td>
<td>本地完整星期名称</td>
</tr>
<tr>
<td>%b</td>
<td>本地简化的月份名称</td>
</tr>
<tr>
<td>%B</td>
<td>本地完整的月份名称</td>
</tr>
<tr>
<td>%c</td>
<td>本地相应的日期表示和时间表示</td>
</tr>
<tr>
<td>%d</td>
<td>月内中的一天（0-31）</td>
</tr>
<tr>
<td>%H</td>
<td>24小时制小时数（0-23）</td>
</tr>
<tr>
<td>%I</td>
<td>12小时制小时数（01-12）</td>
</tr>
<tr>
<td>%j</td>
<td>年内的一天（001-366）</td>
</tr>
<tr>
<td>%m</td>
<td>月份（01-12）</td>
</tr>
<tr>
<td>%M</td>
<td>分钟数（00-59）</td>
</tr>
<tr>
<td>%p</td>
<td>本地A.M.或P.M.的等价符</td>
</tr>
<tr>
<td>%S</td>
<td>秒（00-59）</td>
</tr>
<tr>
<td>%U</td>
<td>一年中的星期数（00-53）星期天为星期的开始</td>
</tr>
<tr>
<td>%w</td>
<td>星期（0-6），星期天为星期的开始</td>
</tr>
<tr>
<td>%W</td>
<td>一年中的星期数（00-53）星期一为星期的开始</td>
</tr>
<tr>
<td>%x</td>
<td>本地相应的日期表示</td>
</tr>
<tr>
<td>%X</td>
<td>本地相应的时间表示</td>
</tr>
<tr>
<td>%y</td>
<td>两位数的年份表示（00-99）</td>
</tr>
<tr>
<td>%Y</td>
<td>四位数的年份表示（000-9999）</td>
</tr>
<tr>
<td>%Z</td>
<td>当前时区的名称</td>
</tr>
<tr>
<td>%%</td>
<td>%号本身</td>
</tr>
</tbody></table>
<h1 id="Locale-的问题"><a href="#Locale-的问题" class="headerlink" title="Locale 的问题"></a>Locale 的问题</h1><p>在使用 strftime 和 strptime 时要注意 locale ，不同的 locale<br>打出来的是不一 样的。同理，在使用 strptime 的时候也是如此，否则就会出错:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">import</span> datetime, locale</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: now = datetime.datetime.now()</span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: format_str = <span class="string">&#x27;%a, %d %b %Y %H:%M:%S&#x27;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: locale.setlocale(locale.LC_ALL, (<span class="string">&#x27;zh_CN&#x27;</span>, <span class="string">&#x27;UTF-8&#x27;</span>))</span><br><span class="line">Out[<span class="number">4</span>]: <span class="string">&#x27;zh_CN.UTF-8&#x27;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: now.strftime(format_str)</span><br><span class="line">Out[<span class="number">5</span>]: <span class="string">&#x27;五, 19  5月 2017 14:25:18&#x27;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: locale.setlocale(locale.LC_ALL, (<span class="string">&#x27;en_US&#x27;</span>, <span class="string">&#x27;UTF-8&#x27;</span>))</span><br><span class="line">Out[<span class="number">6</span>]: <span class="string">&#x27;en_US.UTF-8&#x27;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: now.strftime(format_str)</span><br><span class="line">Out[<span class="number">7</span>]: <span class="string">&#x27;Fri, 19 May 2017 14:25:18&#x27;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">19</span>]:  datetime.datetime.strptime(<span class="string">&#x27;Fri, 19 May 2017 14:25:18&#x27;</span>, format_str)</span><br><span class="line">Out[<span class="number">19</span>]: datetime.datetime(<span class="number">2017</span>, <span class="number">5</span>, <span class="number">19</span>, <span class="number">14</span>, <span class="number">25</span>, <span class="number">18</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">20</span>]: locale.setlocale(locale.LC_ALL, (<span class="string">&#x27;zh_CN&#x27;</span>, <span class="string">&#x27;UTF-8&#x27;</span>))</span><br><span class="line">Out[<span class="number">20</span>]: <span class="string">&#x27;zh_CN.UTF-8&#x27;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">21</span>]:  datetime.datetime.strptime(<span class="string">&#x27;Fri, 19 May 2017 14:25:18&#x27;</span>, format_str)</span><br><span class="line">ValueError: time data <span class="string">&#x27;Fri, 19 May 2017 14:25:18&#x27;</span> does <span class="keyword">not</span> match <span class="built_in">format</span> <span class="string">&#x27;%a, %d %b %Y %H:%M:%S&#x27;</span></span><br></pre></td></tr></table></figure>

<h1 id="时区转换"><a href="#时区转换" class="headerlink" title="时区转换"></a>时区转换</h1><p>首先利用 datetime 中提供的 utcnow() 方法获取到当前UTC时间:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: utc_now = datetime.utcnow()</span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: utc_now</span><br><span class="line">Out[<span class="number">3</span>]: datetime.datetime(<span class="number">2015</span>, <span class="number">5</span>, <span class="number">30</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">59</span>, <span class="number">153675</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: <span class="built_in">print</span> utc_now.tzinfo</span><br><span class="line"><span class="literal">None</span></span><br></pre></td></tr></table></figure>

<p>此时 tzinfo 为 None:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">5</span>]: <span class="keyword">from</span> pytz <span class="keyword">import</span> timezone</span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: tzchina = timezone(<span class="string">&#x27;Asia/Shanghai&#x27;</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">7</span>]: tzchina</span><br><span class="line">Out[<span class="number">7</span>]: &lt;DstTzInfo <span class="string">&#x27;Asia/Shanghai&#x27;</span> LMT+<span class="number">8</span>:06:<span class="number">00</span> STD&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: utc = timezone(<span class="string">&#x27;UTC&#x27;</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: utc_now.replace(tzinfo=utc).astimezone(tzchina)</span><br><span class="line">Out[<span class="number">9</span>]: datetime.datetime(<span class="number">2015</span>, <span class="number">5</span>, <span class="number">30</span>, <span class="number">11</span>, <span class="number">3</span>, <span class="number">59</span>, <span class="number">153675</span>, tzinfo=&lt;DstTzInfo <span class="string">&#x27;Asia/Shanghai&#x27;</span> CST+<span class="number">8</span>:<span class="number">00</span>:<span class="number">00</span> STD&gt;)</span><br></pre></td></tr></table></figure>

<p>要转换为其他时区，则以此类推。</p>
<p>在 Django 中转换时区:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">from</span> django.utils.timezone <span class="keyword">import</span> utc</span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: <span class="keyword">from</span> django.utils.timezone <span class="keyword">import</span> localtime</span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: <span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">In [<span class="number">4</span>]: now = datetime.utcnow().replace(tzinfo=utc)</span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: now</span><br><span class="line">Out[<span class="number">5</span>]: datetime.datetime(<span class="number">2015</span>, <span class="number">5</span>, <span class="number">30</span>, <span class="number">3</span>, <span class="number">16</span>, <span class="number">57</span>, <span class="number">362481</span>, tzinfo=&lt;UTC&gt;)</span><br><span class="line"></span><br><span class="line">In [<span class="number">6</span>]: localtime(now)</span><br><span class="line">Out[<span class="number">7</span>]: datetime.datetime(<span class="number">2015</span>, <span class="number">5</span>, <span class="number">30</span>, <span class="number">11</span>, <span class="number">16</span>, <span class="number">57</span>, <span class="number">362481</span>, tzinfo=&lt;DstTzInfo <span class="string">&#x27;Asia/Shanghai&#x27;</span> CST+<span class="number">8</span>:<span class="number">00</span>:<span class="number">00</span> STD&gt;)</span><br></pre></td></tr></table></figure>

<h1 id="程序暂停"><a href="#程序暂停" class="headerlink" title="程序暂停"></a>程序暂停</h1><p>函数原型： time.sleep(secs) ，secs 参数代表暂停的秒数。示例:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">random.seed()</span><br><span class="line">time.sleep(random.random()*<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Development</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>note</tag>
        <tag>datetime</tag>
      </tags>
  </entry>
  <entry>
    <title>Python Note 600 - Functional Programming</title>
    <url>/2017/02/13/python-note/600functional_programming/</url>
    <content><![CDATA[<h1 id="lambda"><a href="#lambda" class="headerlink" title="lambda"></a>lambda</h1><p>lambda 语句中，冒号前是参数，可以有多个，用逗号隔开，冒号右边的返回值。 lambda 语句构建是一个函数对象:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">1</span>]: f = <span class="keyword">lambda</span> x: x * <span class="number">2</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: f(<span class="number">8</span>)</span><br><span class="line">Out[<span class="number">2</span>]: <span class="number">16</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: f</span><br><span class="line">Out[<span class="number">3</span>]: &lt;function __main__.&lt;<span class="keyword">lambda</span>&gt;(x)&gt;</span><br></pre></td></tr></table></figure>

<span id="more"></span>
<h1 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h1><h2 id="python2"><a href="#python2" class="headerlink" title="python2"></a>python2</h2><p>filter(function or None, sequence) -&gt; list, tuple, or string</p>
<p>返回序列中 function(item) 为 true 的项目。如果 fuction 为 None ，那么就返回 测试结果为 true 的项目。如果序列的类型为 tuple 或者 string ，那么返回相同的 类型；其他的则返回 list</p>
<h2 id="python3"><a href="#python3" class="headerlink" title="python3"></a>python3</h2><p>filter(function or None, iterable) –&gt; filter object</p>
<p>Return an iterator yielding those items of iterable for which function(item) is true. If function is None, return the items that are true.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">4</span>]: foo = [<span class="number">2</span>, <span class="number">18</span>, <span class="number">9</span>, <span class="number">22</span>, <span class="number">17</span>, <span class="number">24</span>, <span class="number">8</span>, <span class="number">12</span>, <span class="number">27</span>]</span><br><span class="line">   ...: <span class="built_in">list</span>(<span class="built_in">filter</span>(<span class="keyword">lambda</span> x: x % <span class="number">3</span> == <span class="number">0</span>, foo))</span><br><span class="line">Out[<span class="number">4</span>]: [<span class="number">18</span>, <span class="number">9</span>, <span class="number">24</span>, <span class="number">12</span>, <span class="number">27</span>]</span><br></pre></td></tr></table></figure>

<h1 id="map"><a href="#map" class="headerlink" title="map"></a>map</h1><h2 id="python-2"><a href="#python-2" class="headerlink" title="python 2"></a>python 2</h2><p>map(function, sequence[, sequence, …]) -&gt; list</p>
<p>返回一个 list ，其内容为把序列中的每一个值作为函数的参数得到的函数的返回值</p>
<h2 id="python-3"><a href="#python-3" class="headerlink" title="python 3"></a>python 3</h2><p>map(func, *iterables) –&gt; map object</p>
<p>Make an iterator that computes the function using arguments from each of the iterables.  Stops when the shortest iterable is exhausted.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">5</span>]: <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x: x * <span class="number">2</span> + <span class="number">10</span>, foo))</span><br><span class="line">Out[<span class="number">5</span>]: [<span class="number">14</span>, <span class="number">46</span>, <span class="number">28</span>, <span class="number">54</span>, <span class="number">44</span>, <span class="number">58</span>, <span class="number">26</span>, <span class="number">34</span>, <span class="number">64</span>]</span><br></pre></td></tr></table></figure>

<p>在 python 2 中，如果使用序列，那么函数会把每个序列相应的值作为参数，序列长度不够的则会以 None 来补充。 在 python 3 中，如果函数使用的参数有多个可迭代对象，那么以最短的那个为准。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list_a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">list_b = [<span class="number">1</span>] * <span class="number">4</span></span><br><span class="line"><span class="built_in">list</span>(<span class="built_in">map</span>(<span class="keyword">lambda</span> x,y:<span class="string">&quot;%s|%s&quot;</span>%(x,y), list_a, list_b))</span><br><span class="line">Out[<span class="number">6</span>]: [<span class="string">&#x27;1|1&#x27;</span>, <span class="string">&#x27;2|1&#x27;</span>, <span class="string">&#x27;3|1&#x27;</span>, <span class="string">&#x27;4|1&#x27;</span>]</span><br></pre></td></tr></table></figure>

<h1 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h1><p>reduce 函数在 python3 中已经不属于 build-in 了，而是在 functools 模块下，需要从functools模块中引入。</p>
<p>reduce(function, sequence[, initial]) -&gt; value</p>
<p>Apply a function of two arguments cumulatively to the items of a sequence,from left to right, so as to reduce the sequence to a single value.For example, reduce(lambda x, y: x+y, [1, 2, 3, 4, 5]) calculates ((((1+2)+3)+4)+5).  If initial is present, it is placed before the itemsof the sequence in the calculation, and serves as a default when thesequence is empty.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">7</span>]: <span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line">   ...: reduce(<span class="keyword">lambda</span> x, y: x+y, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line">Out[<span class="number">7</span>]: <span class="number">15</span></span><br></pre></td></tr></table></figure>

<h1 id="partial"><a href="#partial" class="headerlink" title="partial"></a>partial</h1><p>partial函数可用来修改函数的默认参数值，增加额外的位置参数（positional arguments）或名称参数（ named arguments），你不需再重新定义函数，只需像使用原函数一样的使用partial包裹后的函数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">In [<span class="number">8</span>]: <span class="keyword">from</span> functools <span class="keyword">import</span> partial</span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: <span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">a,b</span>):</span></span><br><span class="line">   ...:     <span class="keyword">return</span> a+b</span><br><span class="line">   ...:     </span><br><span class="line"></span><br><span class="line">In [<span class="number">10</span>]: add(<span class="number">1</span>,<span class="number">3</span>)</span><br><span class="line">Out[<span class="number">10</span>]: <span class="number">4</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">11</span>]: plus1 = partial(add, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">12</span>]: plus1(<span class="number">3</span>)</span><br><span class="line">Out[<span class="number">12</span>]: <span class="number">4</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">13</span>]: plus3 = partial(add, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">14</span>]: plus3(<span class="number">7</span>)</span><br><span class="line">Out[<span class="number">14</span>]: <span class="number">10</span></span><br></pre></td></tr></table></figure>

<p>用途：</p>
<p>在 pyqt 中，控件的 <code>connect</code> 函数只接受函数名，不接受函数参数，这种情况下就可以使用 <code>partial</code> ：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> partial</span><br><span class="line">button.clicked.connect(partial(self.btn_clicked, name))</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">btn_clicked</span>(<span class="params">self, name</span>):</span></span><br><span class="line">    <span class="keyword">if</span> name == <span class="string">&#x27;some_a&#x27;</span>:</span><br><span class="line">        <span class="comment"># do some a</span></span><br><span class="line">    <span class="keyword">if</span> name == <span class="string">&#x27;some_b&#x27;</span>:</span><br><span class="line">        <span class="comment"># do some b</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>参考：<a href="https://blog.csdn.net/xdfyoga1/article/details/80517108">https://blog.csdn.net/xdfyoga1/article/details/80517108</a></p>
]]></content>
      <categories>
        <category>Development</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>note</tag>
        <tag>functional-programming</tag>
      </tags>
  </entry>
  <entry>
    <title>Python Note 700 - Sorting</title>
    <url>/2017/02/13/python-note/700sorting/</url>
    <content><![CDATA[<p>本文基于 Python 2.7.6 [GCC 4.8.2] on linux2 。</p>
<p>Python 中排序常用的有 sort 和 sorted 。 首先来看看定义:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">help</span>(<span class="built_in">list</span>.sort)</span><br><span class="line">Help on method_descriptor:</span><br><span class="line"></span><br><span class="line">sort(...)</span><br><span class="line">    L.sort(cmp=<span class="literal">None</span>, key=<span class="literal">None</span>, reverse=<span class="literal">False</span>) -- stable sort *IN PLACE*;</span><br><span class="line">    cmp(x, y) -&gt; -<span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">help</span>(<span class="built_in">sorted</span>)</span><br><span class="line">Help on built-<span class="keyword">in</span> function <span class="built_in">sorted</span> <span class="keyword">in</span> module __builtin__:</span><br><span class="line"></span><br><span class="line"><span class="built_in">sorted</span>(...)</span><br><span class="line">    <span class="built_in">sorted</span>(iterable, cmp=<span class="literal">None</span>, key=<span class="literal">None</span>, reverse=<span class="literal">False</span>) --&gt; new <span class="built_in">sorted</span> <span class="built_in">list</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sorted</span>(iterable, cmp=<span class="literal">None</span>, key=<span class="literal">None</span>, reverse=<span class="literal">False</span>) --&gt; new <span class="built_in">sorted</span> <span class="built_in">list</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>
<p>从定义中可以看出两者有以下区别：</p>
<ul>
<li>  sort 只能用于列表，而 sorted 不仅可以用于列表，还可以用于其他可迭代对象。</li>
<li>  sort 会改变列表本身，而 sorted 不会改变可迭代对象本身，而是返回一个新的列表。</li>
</ul>
<p><a href="http://blog.csdn.net/qins_superlover/article/details/44340447">http://blog.csdn.net/qins_superlover/article/details/44340447</a></p>
<p><a href="http://www.cnblogs.com/linyawen/archive/2012/03/15/2398302.html">http://www.cnblogs.com/linyawen/archive/2012/03/15/2398302.html</a></p>
<p><a href="http://www.cfanz.cn/?c=article&amp;a=read&amp;id=204633">http://www.cfanz.cn/?c=article&amp;a=read&amp;id=204633</a></p>
]]></content>
      <categories>
        <category>Development</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>note</tag>
        <tag>sorting</tag>
      </tags>
  </entry>
  <entry>
    <title>Python note 800 - logger</title>
    <url>/2017/02/13/python-note/800logger/</url>
    <content><![CDATA[<p>常用代码:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.logger = logging.getLogger(__name__)</span><br><span class="line">self.logger.setLevel(logging.DEBUG)</span><br><span class="line">ch = logging.StreamHandler()</span><br><span class="line">ch.setLevel(logging.DEBUG)</span><br><span class="line">formatter = logging.Formatter(</span><br><span class="line">    <span class="string">&#x27;%(asctime)s - %(name)s - %(levelname)s - %(message)s&#x27;</span>)</span><br><span class="line">ch.setFormatter(formatter)</span><br><span class="line">self.logger.addHandler(ch)</span><br></pre></td></tr></table></figure>

<span id="more"></span>
<p>基本用法:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logging.basicConfig(level=logging.DEBUG,</span><br><span class="line">    <span class="built_in">format</span>=<span class="string">&#x27;%(asctime)s %(name)s %(levelname)s %(message)s&#x27;</span>)</span><br><span class="line">LOG = logging.getLogger(<span class="string">&#x27;test&#x27;</span>)</span><br><span class="line">LOG.debug(<span class="string">&#x27;调试信息&#x27;</span>)</span><br><span class="line">LOG.info(<span class="string">&#x27;有用的信息&#x27;</span>)</span><br><span class="line">LOG.warning(<span class="string">&#x27;警告信息&#x27;</span>)</span><br><span class="line">LOG.error(<span class="string">&#x27;错误信息&#x27;</span>)</span><br><span class="line">LOG.critical(<span class="string">&#x27;严重错误信息&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>  %(name)s Logger的名字</li>
<li>  %(levelno)s 数字形式的日志级别</li>
<li>  %(levelname)s 文本形式的日志级别</li>
<li>  %(pathname)s 调用日志输出函数的模块的完整路径名，可能没有</li>
<li>  %(filename)s 调用日志输出函数的模块的文件名</li>
<li>  %(module)s 调用日志输出函数的模块名</li>
<li>  %(funcName)s 调用日志输出函数的函数名</li>
<li>  %(lineno)d 调用日志输出函数的语句所在的代码行</li>
<li>  %(created)f 当前时间，用UNIX标准的表示时间的浮点数表示</li>
<li>  %(relativeCreated)d 输出日志信息时的，自Logger创建以来的毫秒数</li>
<li>  %(asctime)s 字符串形式的当前时间。默认格式是“2003-07-0816:49:45,896”。逗号后面的是毫秒</li>
<li>  %(thread)d 线程ID。可能没有</li>
<li>  %(threadName)s 线程名。可能没有</li>
<li>  %(process)d 进程ID。可能没有</li>
<li>  %(message)s 用户输出的消息</li>
</ul>
]]></content>
      <categories>
        <category>Development</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>note</tag>
        <tag>logger</tag>
      </tags>
  </entry>
  <entry>
    <title>新手安装 Python 环境（详细图解 Anaconda 安装）</title>
    <url>/2021/02/17/python-bean/anaconda%E5%AE%89%E8%A3%85/%E6%96%B0%E6%89%8B%E5%AE%89%E8%A3%85%20Python%20%E7%8E%AF%E5%A2%83%EF%BC%88%E8%AF%A6%E7%BB%86%E5%9B%BE%E8%A7%A3%20Anaconda%20%E5%AE%89%E8%A3%85%EF%BC%89/</url>
    <content><![CDATA[<h1 id="关于新手-Python-环境的选择"><a href="#关于新手-Python-环境的选择" class="headerlink" title="关于新手 Python 环境的选择"></a>关于新手 Python 环境的选择</h1><p>Linux 操作系统和 MAC 一般是自带 Python 的，可以直接使用 Python 。而 Windows 操作一般是不带 Python 的。所以，在 Windows 中，必须先安装安装 Python 环境才能学习和使用 Python 。针对不同的需求，不同的环境，Python 环境的搭建方式是多种多样。对于新手来说，我觉得 Anaconda 是一个相当好的选择。 Anaconda 是一个 Python 发行套装。现在（2021年2月17日），最新版本的 Anaconda 包含 Python 3.8 和其他丰富的用于科学计算的包（conda, numpy, scipy, ipython notebook等）。 Anaconda 有以下主要特点：</p>
<ol>
<li>开源</li>
<li>安装过程简单</li>
<li>高性能使用Python和R语言</li>
<li>免费的社区支持</li>
<li>支持 Windows 、Linux 和 MAC 。</li>
</ol>
<span id="more"></span>

<h1 id="下载-Anaconda"><a href="#下载-Anaconda" class="headerlink" title="下载 Anaconda"></a>下载 Anaconda</h1><p>Anaconda 的官方下载地址是：<a href="https://www.anaconda.com/products/individual#Downloads">https://www.anaconda.com/products/individual#Downloads</a> ，<br>在这个页面点击 Python 3.8 64-Bit Graphical Installer (457 MB) 即可下载。<br>对于国内用户来说，官方下载地址的下载速度可能有些慢，我们可以在国内的镜像源来下载，比如清华大学开源软件镜像站：<br><a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/">https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/</a><br>Anaconda3-2020.11-Windows-x86_64.exe</p>
<h1 id="安装-Anaconda"><a href="#安装-Anaconda" class="headerlink" title="安装 Anaconda"></a>安装 Anaconda</h1><p>双击 Anaconda3-2020.11-Windows-x86_64.exe 会出现安装界面，点击 Next：<br><img src="https://img-blog.csdnimg.cn/20210217163952667.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21vdXNlMjAxOA==,size_16,color_FFFFFF,t_70" alt="Anaconda 安装1"><br>点击 I Agree ：<br><img src="https://img-blog.csdnimg.cn/20210217164133751.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21vdXNlMjAxOA==,size_16,color_FFFFFF,t_70" alt="Anaconda 安装2"><br>这里选择第二个， All Users ：<br><img src="https://img-blog.csdnimg.cn/20210217164243462.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21vdXNlMjAxOA==,size_16,color_FFFFFF,t_70" alt="Anaconda 安装3"><br>然后点击 Next ：<br><img src="https://img-blog.csdnimg.cn/20210217164338661.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21vdXNlMjAxOA==,size_16,color_FFFFFF,t_70" alt="Anaconda 安装4"><br>点击 Next ：<br><img src="https://img-blog.csdnimg.cn/20210217164338674.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21vdXNlMjAxOA==,size_16,color_FFFFFF,t_70" alt="Anaconda 安装5"><br>把两个勾选框都选上：<br><img src="https://img-blog.csdnimg.cn/20210217164338687.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21vdXNlMjAxOA==,size_16,color_FFFFFF,t_70" alt="Anaconda 安装5"><br>然后点击 Install ：<br><img src="https://img-blog.csdnimg.cn/20210217164338696.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21vdXNlMjAxOA==,size_16,color_FFFFFF,t_70" alt="Anaconda 安装6"><br>程序开始安装：<br><img src="https://img-blog.csdnimg.cn/20210217164338700.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21vdXNlMjAxOA==,size_16,color_FFFFFF,t_70" alt="Anaconda 安装7"><br>安装完成，点击 Next ：<br><img src="https://img-blog.csdnimg.cn/20210217164338702.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21vdXNlMjAxOA==,size_16,color_FFFFFF,t_70" alt="Anaconda 安装8"><br>点击 Next ：<br><img src="https://img-blog.csdnimg.cn/20210217164338712.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21vdXNlMjAxOA==,size_16,color_FFFFFF,t_70" alt="Anaconda 安装9"><br>点击 Finish，安装结束：<br><img src="https://img-blog.csdnimg.cn/20210217164338740.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21vdXNlMjAxOA==,size_16,color_FFFFFF,t_70" alt="Anaconda 安装10"><br>在 Windows 的形如菜单可以看到，最近添加里有两个新项目，一个是 Anaconda Powershell Prompt ，还有一个是 Jupyter Notebook 。<br><img src="https://img-blog.csdnimg.cn/20210217164338753.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21vdXNlMjAxOA==,size_16,color_FFFFFF,t_70" alt="Anaconda 安装11"></p>
<p>我们打开 Anaconda Powershell Prompt ，输入：<br><code>&gt;&gt;&gt; Python -V</code><br>如果显示：<br><code>Python 3.8.5</code> ，那么就表示安装成功。<br><img src="https://img-blog.csdnimg.cn/2021021716593014.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21vdXNlMjAxOA==,size_16,color_FFFFFF,t_70" alt="Anaconda 安装12"></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>install</tag>
      </tags>
  </entry>
  <entry>
    <title>Python note 900 - other</title>
    <url>/2017/02/13/python-note/900other/</url>
    <content><![CDATA[<h1 id="ConfigParser-Usage"><a href="#ConfigParser-Usage" class="headerlink" title="ConfigParser Usage"></a>ConfigParser Usage</h1><p>Example:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">conf_file = <span class="string">&#x27;conf.ini&#x27;</span></span><br><span class="line">conf_parser = ConfigParser.ConfigParser()</span><br><span class="line">conf_parser.read(conf_file)</span><br><span class="line">conf = &#123;key: value <span class="keyword">for</span> key, value <span class="keyword">in</span> conf_parser.items(section_name)&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>
<h1 id="Deal-with-INI-file"><a href="#Deal-with-INI-file" class="headerlink" title="Deal with INI file"></a>Deal with INI file</h1><p>基本的文件示例如下:</p>
<pre><code>[DEFAULT]
ServerAliveInterval = 45
Compression = yes
CompressionLevel = 9
ForwardX11 = yes

[bitbucket.org]
User = hg

[topsecret.server.com]
Port = 50022
ForwardX11 = no
</code></pre>
<h1 id="如何生成-INI-文件"><a href="#如何生成-INI-文件" class="headerlink" title="如何生成 INI 文件"></a>如何生成 INI 文件</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> configparser</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>config = configparser.ConfigParser()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>config[<span class="string">&#x27;DEFAULT&#x27;</span>] = &#123;<span class="string">&#x27;ServerAliveInterval&#x27;</span>: <span class="string">&#x27;45&#x27;</span>,</span><br><span class="line"><span class="meta">... </span>                     <span class="string">&#x27;Compression&#x27;</span>: <span class="string">&#x27;yes&#x27;</span>,</span><br><span class="line"><span class="meta">... </span>                     <span class="string">&#x27;CompressionLevel&#x27;</span>: <span class="string">&#x27;9&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>config[<span class="string">&#x27;bitbucket.org&#x27;</span>] = &#123;&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>config[<span class="string">&#x27;bitbucket.org&#x27;</span>][<span class="string">&#x27;User&#x27;</span>] = <span class="string">&#x27;hg&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>config[<span class="string">&#x27;topsecret.server.com&#x27;</span>] = &#123;&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>topsecret = config[<span class="string">&#x27;topsecret.server.com&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>topsecret[<span class="string">&#x27;Port&#x27;</span>] = <span class="string">&#x27;50022&#x27;</span>     <span class="comment"># mutates the parser</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>topsecret[<span class="string">&#x27;ForwardX11&#x27;</span>] = <span class="string">&#x27;no&#x27;</span>  <span class="comment"># same here</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>config[<span class="string">&#x27;DEFAULT&#x27;</span>][<span class="string">&#x27;ForwardX11&#x27;</span>] = <span class="string">&#x27;yes&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;example.ini&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> configfile:</span><br><span class="line"><span class="meta">... </span>  config.write(configfile)</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p>使用方法和字典基本一致。</p>
<h1 id="如何读取-INI-文件"><a href="#如何读取-INI-文件" class="headerlink" title="如何读取 INI 文件"></a>如何读取 INI 文件</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> configparser</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>config = configparser.ConfigParser()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>config.sections()</span><br><span class="line">[]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>config.read(<span class="string">&#x27;example.ini&#x27;</span>)</span><br><span class="line">[<span class="string">&#x27;example.ini&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>config.sections()</span><br><span class="line">[<span class="string">&#x27;bitbucket.org&#x27;</span>, <span class="string">&#x27;topsecret.server.com&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;bitbucket.org&#x27;</span> <span class="keyword">in</span> config</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;bytebong.com&#x27;</span> <span class="keyword">in</span> config</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>config[<span class="string">&#x27;bitbucket.org&#x27;</span>][<span class="string">&#x27;User&#x27;</span>]</span><br><span class="line"><span class="string">&#x27;hg&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>config[<span class="string">&#x27;DEFAULT&#x27;</span>][<span class="string">&#x27;Compression&#x27;</span>]</span><br><span class="line"><span class="string">&#x27;yes&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>topsecret = config[<span class="string">&#x27;topsecret.server.com&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>topsecret[<span class="string">&#x27;ForwardX11&#x27;</span>]</span><br><span class="line"><span class="string">&#x27;no&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>topsecret[<span class="string">&#x27;Port&#x27;</span>]</span><br><span class="line"><span class="string">&#x27;50022&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> key <span class="keyword">in</span> config[<span class="string">&#x27;bitbucket.org&#x27;</span>]: <span class="built_in">print</span>(key)</span><br><span class="line">...</span><br><span class="line">user</span><br><span class="line">compressionlevel</span><br><span class="line">serveraliveinterval</span><br><span class="line">compression</span><br><span class="line">forwardx11</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>config[<span class="string">&#x27;bitbucket.org&#x27;</span>][<span class="string">&#x27;ForwardX11&#x27;</span>]</span><br><span class="line"><span class="string">&#x27;yes&#x27;</span></span><br></pre></td></tr></table></figure>

<p>DEFAULT 一节会自动代入到其他节</p>
<h1 id="支持的数据类型"><a href="#支持的数据类型" class="headerlink" title="支持的数据类型"></a>支持的数据类型</h1><p>Config parsers<br>不猜测数据类型，都是以文本形式保存的。你要自己转换数据类型:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">int</span>(topsecret[<span class="string">&#x27;Port&#x27;</span>])</span><br><span class="line"><span class="number">50022</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">float</span>(topsecret[<span class="string">&#x27;CompressionLevel&#x27;</span>])</span><br><span class="line"><span class="number">9.0</span></span><br></pre></td></tr></table></figure>

<p>提供 getboolean() 、 getint() 和 getfloat() 来读取相应的数据类型。<br>getboolean 比较方便，因为 bool(‘False’) 的结果为 True :</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>topsecret.getboolean(<span class="string">&#x27;ForwardX11&#x27;</span>)</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>config[<span class="string">&#x27;bitbucket.org&#x27;</span>].getboolean(<span class="string">&#x27;ForwardX11&#x27;</span>)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>config.getboolean(<span class="string">&#x27;bitbucket.org&#x27;</span>, <span class="string">&#x27;Compression&#x27;</span>)</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure>

<p>更多内容参见：<a href="https://docs.python.org/3/library/configparser.html/#module-configparser">https://docs.python.org/3/library/configparser.html\#module-configparser</a></p>
<h1 id="读取-Excel-文件内容"><a href="#读取-Excel-文件内容" class="headerlink" title="读取 Excel 文件内容"></a>读取 Excel 文件内容</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> xlrd</span><br><span class="line">workbook = xlrd.open_workbook(filename) <span class="comment">#打开文件</span></span><br><span class="line">sheetcount = workbook.nsheets <span class="comment">#文件内sheet的数量</span></span><br><span class="line">sheet = workbook.sheet_by_index(i) <span class="comment">#获得某个sheet，第一个sheet索引为0</span></span><br><span class="line">rowcount = sheet.nrows <span class="comment">#最大行数</span></span><br><span class="line">colcount = sheet.ncols <span class="comment">#最大列数</span></span><br></pre></td></tr></table></figure>

<h1 id="交换变量"><a href="#交换变量" class="headerlink" title="交换变量"></a>交换变量</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="number">6</span></span><br><span class="line">y = <span class="number">5</span></span><br><span class="line">x, y = y, x</span><br><span class="line"><span class="built_in">print</span> x</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">5</span></span><br><span class="line"><span class="built_in">print</span> y</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">6</span></span><br></pre></td></tr></table></figure>

<h1 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h1><p>下面的最后一种方式在绑定两个不同类型的对象时显得很cool:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">nfc = [<span class="string">&quot;Packers&quot;</span>, <span class="string">&quot;49ers&quot;</span>]</span><br><span class="line">afc = [<span class="string">&quot;Ravens&quot;</span>, <span class="string">&quot;Patriots&quot;</span>]</span><br><span class="line"><span class="built_in">print</span> nfc + afc</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="string">&#x27;Packers&#x27;</span>, <span class="string">&#x27;49ers&#x27;</span>, <span class="string">&#x27;Ravens&#x27;</span>, <span class="string">&#x27;Patriots&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">str</span>(<span class="number">1</span>) + <span class="string">&quot; world&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span> world</span><br><span class="line"><span class="built_in">print</span> `<span class="number">1</span>` + <span class="string">&quot; world&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span> world</span><br><span class="line"><span class="built_in">print</span> <span class="number">1</span>, <span class="string">&quot;world&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span> world</span><br><span class="line"><span class="built_in">print</span> nfc, <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="string">&#x27;Packers&#x27;</span>, <span class="string">&#x27;49ers&#x27;</span>] <span class="number">1</span></span><br></pre></td></tr></table></figure>

<h1 id="数字技巧"><a href="#数字技巧" class="headerlink" title="数字技巧"></a>数字技巧</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#除后向下取整</span></span><br><span class="line"><span class="built_in">print</span> <span class="number">5.0</span>//<span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span></span><br><span class="line"><span class="comment"># 2的5次方</span></span><br><span class="line"><span class="built_in">print</span> <span class="number">2</span>**<span class="number">5</span></span><br><span class="line">&gt;&gt; <span class="number">32</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#注意浮点数的除法</span></span><br><span class="line"><span class="built_in">print</span> <span class="number">.3</span>/<span class="number">.1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2.9999999999999996</span></span><br><span class="line"><span class="built_in">print</span> <span class="number">.3</span>//<span class="number">.1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2.0</span></span><br></pre></td></tr></table></figure>

<h1 id="数值比较"><a href="#数值比较" class="headerlink" title="数值比较"></a>数值比较</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> <span class="number">3</span> &gt; x &gt; <span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span> x</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> <span class="number">1</span> &lt; x &gt; <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span> x</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span></span><br></pre></td></tr></table></figure>

<h1 id="计数时使用-Counter-对象"><a href="#计数时使用-Counter-对象" class="headerlink" title="计数时使用 Counter 对象"></a>计数时使用 Counter 对象</h1><p>这听起来显而易见，但经常被人忘记。对于大多数程序员来说，数一个东西是一项 很常见的任务，而且在大多数情况下并不是很有挑战性的事情——这里有几种方法 能更简单的完成这种任务。</p>
<p>Python的collections类库里有个内置的dict类的子类，是专门来干这种事情的:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = Counter(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c</span><br><span class="line">Counter(&#123;<span class="string">&#x27;l&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;o&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27; &#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;e&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;d&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;h&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;r&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;w&#x27;</span>: <span class="number">1</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c.most_common(<span class="number">2</span>)</span><br><span class="line">[(<span class="string">&#x27;l&#x27;</span>, <span class="number">3</span>), (<span class="string">&#x27;o&#x27;</span>, <span class="number">2</span>)]</span><br></pre></td></tr></table></figure>

<h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><p>除了python内置的数据类型外，在collection模块同样还包括一些特别的用例，在 有些场合Counter非常实用。如果你参加过在这一年的Facebook HackerCup，你甚至 也能找到他的实用之处:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"><span class="built_in">print</span> Counter(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Counter(&#123;<span class="string">&#x27;l&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;h&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;e&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;o&#x27;</span>: <span class="number">1</span>&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="迭代工具"><a href="#迭代工具" class="headerlink" title="迭代工具"></a>迭代工具</h1><p>和collections库一样，还有一个库叫itertools，对某些问题真能高效地解决。 其中一个用例是查找所有组合，他能告诉你在一个组中元素的所有不能的组合方式:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> combinations</span><br><span class="line">teams = [<span class="string">&quot;Packers&quot;</span>, <span class="string">&quot;49ers&quot;</span>, <span class="string">&quot;Ravens&quot;</span>, <span class="string">&quot;Patriots&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> game <span class="keyword">in</span> combinations(teams, <span class="number">2</span>):</span><br><span class="line"><span class="built_in">print</span> game</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>(<span class="string">&#x27;Packers&#x27;</span>, <span class="string">&#x27;49ers&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>(<span class="string">&#x27;Packers&#x27;</span>, <span class="string">&#x27;Ravens&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>(<span class="string">&#x27;Packers&#x27;</span>, <span class="string">&#x27;Patriots&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>(<span class="string">&#x27;49ers&#x27;</span>, <span class="string">&#x27;Ravens&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>(<span class="string">&#x27;49ers&#x27;</span>, <span class="string">&#x27;Patriots&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>(<span class="string">&#x27;Ravens&#x27;</span>, <span class="string">&#x27;Patriots&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h1 id="False-True"><a href="#False-True" class="headerlink" title="False == True"></a>False == True</h1><p>比起实用技术来说这是一个很有趣的事，在python中，True和False是全局变量，因此:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="literal">False</span> = <span class="literal">True</span></span><br><span class="line"><span class="keyword">if</span> <span class="literal">False</span>:</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;Hello&quot;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;World&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Hello</span><br></pre></td></tr></table></figure>

<h1 id="创建一次性的、快速的小型web服务"><a href="#创建一次性的、快速的小型web服务" class="headerlink" title="创建一次性的、快速的小型web服务"></a>创建一次性的、快速的小型web服务</h1><p>python 内置模块可以创建 Web 服务:</p>
<ul>
<li>  For python 3.x : <code>python3 -m http.server</code></li>
<li>  For python 2.x : <code>python -m SimpleHTTPServer</code></li>
</ul>
<p>有时候，我们需要在两台机器或服务之间做一些简便的、很基础的RPC之类的交互。 我们希望用一种简单的方式使用B程序调用A程序里的一个方法——有时是在另一台 机器上。仅内部使用。</p>
<p>我并不鼓励将这里介绍的方法用在非内部的、一次性的编程中。我们可以使用一种 叫做XML-RPC的协议 (相对应的是这个Python库)，来做这种事情。</p>
<p>下面是一个使用SimpleXMLRPCServer模块建立一个快速的小的文件读取服务器的例子:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> SimpleXMLRPCServer <span class="keyword">import</span> SimpleXMLRPCServer</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">file_reader</span>(<span class="params">file_name</span>):</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_name, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">return</span> f.read()</span><br><span class="line"></span><br><span class="line">server = SimpleXMLRPCServer((<span class="string">&#x27;localhost&#x27;</span>, <span class="number">8000</span>))</span><br><span class="line">server.register_introspection_functions()</span><br><span class="line">server.register_function(file_reader)</span><br><span class="line">server.serve_forever()</span><br></pre></td></tr></table></figure>

<p>客户端:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> xmlrpclib</span><br><span class="line">proxy = xmlrpclib.ServerProxy(<span class="string">&#x27;http://localhost:8000/&#x27;</span>)</span><br><span class="line">proxy.file_reader(<span class="string">&#x27;/tmp/secret.txt&#x27;</span>)</span><br></pre></td></tr></table></figure>


<h1 id="漂亮的打印出JSON"><a href="#漂亮的打印出JSON" class="headerlink" title="漂亮的打印出JSON"></a>漂亮的打印出JSON</h1><p>为了能让JSON数据表现的更友好，我们可以使用indent参数来输出漂亮的JSON。<br>当在控制台交互式编程或做日志时，这尤其有用:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> json</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(json.dumps(data))  <span class="comment"># No indention</span></span><br><span class="line">&#123;<span class="string">&quot;status&quot;</span>: <span class="string">&quot;OK&quot;</span>, <span class="string">&quot;count&quot;</span>: <span class="number">2</span>, <span class="string">&quot;results&quot;</span>: [&#123;<span class="string">&quot;age&quot;</span>: <span class="number">27</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Oz&quot;</span>, <span class="string">&quot;lactose_intolerant&quot;</span>: true&#125;, &#123;<span class="string">&quot;age&quot;</span>: <span class="number">29</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Joe&quot;</span>, <span class="string">&quot;lactose_intolerant&quot;</span>: false&#125;]&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(json.dumps(data, indent=<span class="number">2</span>))  <span class="comment"># With indention</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;status&quot;</span>: <span class="string">&quot;OK&quot;</span>,</span><br><span class="line">  <span class="string">&quot;count&quot;</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="string">&quot;results&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;age&quot;</span>: <span class="number">27</span>,</span><br><span class="line">      <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Oz&quot;</span>,</span><br><span class="line">      <span class="string">&quot;lactose_intolerant&quot;</span>: true</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">&quot;age&quot;</span>: <span class="number">29</span>,</span><br><span class="line">      <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Joe&quot;</span>,</span><br><span class="line">      <span class="string">&quot;lactose_intolerant&quot;</span>: false</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>同样，使用内置的pprint模块，也可以让其它任何东西打印输出的更漂亮。</p>
<h1 id="动态生成类的属性"><a href="#动态生成类的属性" class="headerlink" title="动态生成类的属性"></a>动态生成类的属性</h1><p>正确的操作应该是 <code>setattr( A, &#39;d&#39;, 1)</code> 或者 <code>setattr( a1.__class__, &#39;d&#39;, 1)</code></p>
<p>要取得模块中的某个属性可以用 <code>getattr()</code> ，比如:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c = <span class="built_in">getattr</span>(m, <span class="string">&#x27;myclass&#x27;</span>)</span><br><span class="line">myobject = c()</span><br></pre></td></tr></table></figure>

<h1 id="动态生成类"><a href="#动态生成类" class="headerlink" title="动态生成类"></a>动态生成类</h1><blockquote>
<p><strong>important</strong></p>
<p>This section is copy from<br><a href="http://www.python8.org/a/fenleiwenzhang/yuyanjichu/2010/1001/566.html">http://www.python8.org/a/fenleiwenzhang/yuyanjichu/2010/1001/566.html</a></p>
</blockquote>
<p>方法一:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getObj</span>(<span class="params">name</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">eval</span>(name+<span class="string">&#x27;()&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>方法二:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">m = <span class="built_in">__import__</span>(<span class="string">&#x27;mymodule&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>但是要注意：如果myclass并不在mymodule的自动导出列表中（__all__），<br>则必须显式地导入，例如:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">m = <span class="built_in">__import__</span>(<span class="string">&#x27;mymodule&#x27;</span>, <span class="built_in">globals</span>(), <span class="built_in">locals</span>(), [<span class="string">&#x27;myclass&#x27;</span>])</span><br><span class="line">c = <span class="built_in">getattr</span>(m, <span class="string">&#x27;myclass&#x27;</span>)</span><br><span class="line">myobject = c()</span><br></pre></td></tr></table></figure>

<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 动态生成类</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_object</span>(<span class="params">object_attribute</span>):</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">o</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;#class&#x27;</span> <span class="keyword">in</span> object_attribute.keys():</span><br><span class="line">        (module_name, class_name) = object_attribute[<span class="string">&#x27;#class&#x27;</span>].rsplit(<span class="string">&#x27;.&#x27;</span>, <span class="number">1</span>)</span><br><span class="line">        module_meta = <span class="built_in">__import__</span>(module_name)</span><br><span class="line">        class_meta = <span class="built_in">getattr</span>(module_meta, class_name)</span><br><span class="line">        o = class_meta()</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> object_attribute:</span><br><span class="line">        <span class="comment"># maybe should be, need test!!!!:</span></span><br><span class="line">        <span class="comment"># if str(type(object_attribute[k])) == &#x27;&lt;type \&#x27;dict\&#x27;&gt;&#x27;:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">str</span>(<span class="built_in">type</span>(object_attribute[k])) == <span class="string">&#x27;&lt;class \&#x27;dict\&#x27;&gt;&#x27;</span>:</span><br><span class="line">            <span class="built_in">setattr</span>(o, k, create_object(object_attribute[k]))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">setattr</span>(o, k, object_attribute[k])</span><br><span class="line">    <span class="keyword">return</span> o</span><br></pre></td></tr></table></figure>

<p>example.py:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">class1</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print1</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;studio_name:&#x27;</span> + <span class="built_in">str</span>(self.studio))</span><br></pre></td></tr></table></figure>


<p>class class2:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print2</span>(<span class="params">self</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;room:&#x27;</span> + <span class="built_in">str</span>(self.room))</span><br></pre></td></tr></table></figure>

<p>test.py:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>():</span></span><br><span class="line">    dict_object = &#123;<span class="string">&quot;#class&quot;</span>: <span class="string">&quot;example.class1&quot;</span>,</span><br><span class="line">                   <span class="string">&quot;studio&quot;</span>: <span class="string">&quot;demonstudio&quot;</span>,</span><br><span class="line">                   <span class="string">&quot;office&quot;</span>: &#123;<span class="string">&quot;#class&quot;</span>: <span class="string">&quot;example.class2&quot;</span>,</span><br><span class="line">                              <span class="string">&quot;floor&quot;</span>: <span class="number">5</span>,</span><br><span class="line">                              <span class="string">&quot;room&quot;</span>: <span class="string">&quot;501&quot;</span></span><br><span class="line">                              &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">    o = create_object(dict_object)</span><br><span class="line">    o.print1()</span><br><span class="line">    o.office.print2()</span><br><span class="line">    <span class="built_in">print</span>(o.studio)</span><br><span class="line">    <span class="built_in">print</span>(o.office.floor)</span><br><span class="line"></span><br><span class="line">test()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Development</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>note</tag>
      </tags>
  </entry>
  <entry>
    <title>Pandas Notes</title>
    <url>/2021/02/01/pandas-tips/</url>
    <content><![CDATA[<h1 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h1><ul>
<li>合并一个EXCEL 文件中的所有SHEET</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df=pd.concat(pd.read_excel(workbook_url,sheet_name=<span class="literal">None</span>),ignore_index=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>合并一个目录下所有 EXCEL 文件中的所有SHEET</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df = pd.concat(</span><br><span class="line">    [pd.concat(pd.read_excel(wb, sheet_name=<span class="literal">None</span>), ignore_index=<span class="literal">True</span>) <span class="keyword">for</span> wb <span class="keyword">in</span> wbs],</span><br><span class="line">    ignore_index=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>看列属性</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.dtypes</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<ul>
<li>分类计数</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">gp = df[df[<span class="string">&#x27;时间&#x27;</span>]&gt;<span class="string">&#x27;2021-01-18&#x27;</span>].groupby(<span class="string">&#x27;目的地&#x27;</span>)</span><br><span class="line">gp[<span class="string">&#x27;姓名&#x27;</span>].count()</span><br></pre></td></tr></table></figure>

<ul>
<li>数据透视</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pd.pivot_table(</span><br><span class="line">    df0118,</span><br><span class="line">    index=[<span class="string">&#x27;区&#x27;</span>],</span><br><span class="line">    values=[<span class="string">&#x27;姓名&#x27;</span>],</span><br><span class="line">    columns=[<span class="string">&#x27;分类&#x27;</span>],</span><br><span class="line">    aggfunc=[<span class="built_in">len</span>],</span><br><span class="line">    fill_value=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>按规定行和列输出</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df = pd.DataFrame(</span><br><span class="line">    np.arange(<span class="number">12</span>).reshape((<span class="number">4</span>,<span class="number">3</span>)),</span><br><span class="line">    columns=[<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>],index=[<span class="string">&#x27;D&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;A&#x27;</span>])</span><br></pre></td></tr></table></figure>

<ul>
<li>根据条件新建列并赋值</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df[<span class="string">&#x27;some_col&#x27;</span>] = df[<span class="string">&#x27;one_col&#x27;</span>].apply(<span class="keyword">lambda</span> x: x <span class="keyword">if</span> <span class="built_in">len</span>(x) == <span class="number">18</span> <span class="keyword">else</span> <span class="literal">None</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>修改列名<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.rename(columns=&#123;<span class="string">&#x27;a&#x27;</span>:<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;b&#x27;</span>:<span class="string">&#x27;B&#x27;</span>&#125;,inplace=<span class="literal">True</span>)</span><br><span class="line">df.rename(<span class="built_in">str</span>.lower, axis=<span class="string">&#x27;columns&#x27;</span>)</span><br><span class="line">df.columns = [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>]</span><br></pre></td></tr></table></figure></li>
</ul>
<h1 id="日期时间"><a href="#日期时间" class="headerlink" title="日期时间"></a>日期时间</h1><ul>
<li>从日期属性中提取年月日</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df[<span class="string">&#x27;year&#x27;</span>] = df[<span class="string">&#x27;date&#x27;</span>].dt.year</span><br><span class="line">df[<span class="string">&#x27;month&#x27;</span>] = df[<span class="string">&#x27;date&#x27;</span>].dt.month</span><br><span class="line">df[<span class="string">&#x27;day&#x27;</span>] = df[<span class="string">&#x27;date&#x27;</span>].dt.day</span><br></pre></td></tr></table></figure>

<ul>
<li>只保留日期，不要时间，即把日期置为0点</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df[<span class="string">&#x27;日期&#x27;</span>] = pd.to_datetime(df[<span class="string">&#x27;开始日期&#x27;</span>].dt.date)</span><br><span class="line"><span class="comment"># OR</span></span><br><span class="line">df[<span class="string">&#x27;日期&#x27;</span>] = df[<span class="string">&#x27;开始日期&#x27;</span>].dt.normalize()</span><br></pre></td></tr></table></figure>

<ul>
<li>按照指定格式打印时间，注意类型会由 <code>datetime64[ns]</code> 变为 <code>object</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df[<span class="string">&#x27;dd&#x27;</span>].dt.strftime(<span class="string">&quot;%Y-%m-%d&quot;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>给日期加一天</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df[<span class="string">&#x27;two_date&#x27;</span>] = df[<span class="string">&#x27;one_date&#x27;</span>] + datetime.timedelta(days=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<ol>
<li>dt.date 和 dt.normalize()，他们都返回一个日期的 日期部分，即只包含年月日。但不同的是date返回的Series是object类型的，normalize()返回的Series是datetime64类型的。</li>
<li>dt.year、dt.month、dt.day、dt.hour、dt.minute、dt.second、dt.week (dt.weekofyear和dt.week一样)分别返回日期的年、月、日、小时、分、秒及一年中的第几周</li>
<li>dt.weekday（dt.dayofweek一样）返回一周中的星期几，0代表星期一，6代表星期天，dt.weekday_name返回星期几的英文。</li>
<li>dt.dayofyear 返回一年的第几天，dt.quarter得到每个日期分别是第几个季度。</li>
<li>dt.is_month_start和dt.is_month_end 判断日期是否是每月的第一天或最后一天，可以将month换成year和quarter相应的判断日期是否是每年或季度的第一天或最后一天.</li>
<li>dt.is_leap_year 判断是否是闰年</li>
<li>dt.month_name() 返回月份的英文名称.</li>
</ol>
<h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><h2 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h2><ul>
<li>str.replace():替换字符串</li>
</ul>
<p>Series.str.replace(pat, repl, n=- 1, case=None, flags=0, regex=None)</p>
<p>Replace each occurrence of pattern/regex in the Series/Index.</p>
<p>Equivalent to str.replace() or re.sub(), depending on the regex value.</p>
<h2 id="去空白"><a href="#去空白" class="headerlink" title="去空白"></a>去空白</h2><ul>
<li>str.strip():删除左右两侧的空白（开始/结束）</li>
<li>str.lstrip():删除左侧空白</li>
<li>str.rstrip():删除右侧空白</li>
</ul>
<h2 id="大小写変换"><a href="#大小写変换" class="headerlink" title="大小写変换"></a>大小写変换</h2><ul>
<li>str.lower():转换为小写</li>
<li>str.upper():转换为大写</li>
<li>str.capitalize():将第一个字母转换为大写，将其他字母转换为小写</li>
<li>str.title():将单词的首字母转换为大写，其余转换为小写<br>将描述每个示例。</li>
</ul>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>pandas</tag>
        <tag>dataframe</tag>
        <tag>excel</tag>
      </tags>
  </entry>
</search>
